                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Wed Feb  7 12:53:08 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module joysticksend
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _SE8R01_Init
                                     14 	.globl _SE8R01_Analog_Init
                                     15 	.globl _SE8R01_Calibration
                                     16 	.globl _rf_switch_bank
                                     17 	.globl _init_io
                                     18 	.globl _delay
                                     19 	.globl _InitializeSystemClock
                                     20 	.globl _InitializeSPI
                                     21 	.globl _read_spi_buf
                                     22 	.globl _write_spi_buf
                                     23 	.globl _read_spi_reg
                                     24 	.globl _write_spi_reg
                                     25 	.globl _write_spi
                                     26 	.globl _delayTenMicro
                                     27 	.globl _memset
                                     28 	.globl _tx_buf
                                     29 	.globl _rx_buf
                                     30 	.globl _ADDRESS0
                                     31 	.globl _ADDRESS1
                                     32 	.globl _ADDRESS5
                                     33 	.globl _ADDRESS4
                                     34 	.globl _ADDRESS3
                                     35 	.globl _ADDRESS2
                                     36 	.globl _TX_ADDRESS
                                     37 	.globl _status
                                     38 	.globl _pip
                                     39 	.globl _signal_lv
                                     40 	.globl _newdata
                                     41 	.globl _pload_width_now
                                     42 	.globl _SE8R01_DR_500K
                                     43 	.globl _SE8R01_DR_1M
                                     44 	.globl _SE8R01_DR_2M
                                     45 	.globl _myData_pip4
                                     46 	.globl _myData_pip5
                                     47 	.globl _gtemp
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DATA
      000000                         52 _gtemp::
      000000                         53 	.ds 5
      000005                         54 _myData_pip5::
      000005                         55 	.ds 5
      00000A                         56 _myData_pip4::
      00000A                         57 	.ds 5
                                     58 ;--------------------------------------------------------
                                     59 ; ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area INITIALIZED
      000000                         62 _SE8R01_DR_2M::
      000000                         63 	.ds 2
      000002                         64 _SE8R01_DR_1M::
      000002                         65 	.ds 2
      000004                         66 _SE8R01_DR_500K::
      000004                         67 	.ds 2
      000006                         68 _pload_width_now::
      000006                         69 	.ds 2
      000008                         70 _newdata::
      000008                         71 	.ds 2
      00000A                         72 _signal_lv::
      00000A                         73 	.ds 1
      00000B                         74 _pip::
      00000B                         75 	.ds 2
      00000D                         76 _status::
      00000D                         77 	.ds 1
      00000E                         78 _TX_ADDRESS::
      00000E                         79 	.ds 4
      000012                         80 _ADDRESS2::
      000012                         81 	.ds 1
      000013                         82 _ADDRESS3::
      000013                         83 	.ds 1
      000014                         84 _ADDRESS4::
      000014                         85 	.ds 1
      000015                         86 _ADDRESS5::
      000015                         87 	.ds 1
      000016                         88 _ADDRESS1::
      000016                         89 	.ds 4
      00001A                         90 _ADDRESS0::
      00001A                         91 	.ds 4
      00001E                         92 _rx_buf::
      00001E                         93 	.ds 32
      00003E                         94 _tx_buf::
      00003E                         95 	.ds 32
                                     96 ;--------------------------------------------------------
                                     97 ; Stack segment in internal ram 
                                     98 ;--------------------------------------------------------
                                     99 	.area	SSEG
      000000                        100 __start__stack:
      000000                        101 	.ds	1
                                    102 
                                    103 ;--------------------------------------------------------
                                    104 ; absolute external ram data
                                    105 ;--------------------------------------------------------
                                    106 	.area DABS (ABS)
                                    107 ;--------------------------------------------------------
                                    108 ; interrupt vector 
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME
      000000                        111 __interrupt_vect:
      000000 82v00u00u00            112 	int s_GSINIT ;reset
      000004 82 00 00 00            113 	int 0x0000 ;trap
      000008 82 00 00 00            114 	int 0x0000 ;int0
      00000C 82 00 00 00            115 	int 0x0000 ;int1
      000010 82 00 00 00            116 	int 0x0000 ;int2
      000014 82 00 00 00            117 	int 0x0000 ;int3
      000018 82 00 00 00            118 	int 0x0000 ;int4
      00001C 82 00 00 00            119 	int 0x0000 ;int5
      000020 82 00 00 00            120 	int 0x0000 ;int6
      000024 82 00 00 00            121 	int 0x0000 ;int7
      000028 82 00 00 00            122 	int 0x0000 ;int8
      00002C 82 00 00 00            123 	int 0x0000 ;int9
      000030 82 00 00 00            124 	int 0x0000 ;int10
      000034 82 00 00 00            125 	int 0x0000 ;int11
      000038 82 00 00 00            126 	int 0x0000 ;int12
      00003C 82 00 00 00            127 	int 0x0000 ;int13
      000040 82 00 00 00            128 	int 0x0000 ;int14
      000044 82 00 00 00            129 	int 0x0000 ;int15
      000048 82 00 00 00            130 	int 0x0000 ;int16
      00004C 82 00 00 00            131 	int 0x0000 ;int17
      000050 82 00 00 00            132 	int 0x0000 ;int18
      000054 82 00 00 00            133 	int 0x0000 ;int19
      000058 82 00 00 00            134 	int 0x0000 ;int20
      00005C 82 00 00 00            135 	int 0x0000 ;int21
      000060 82 00 00 00            136 	int 0x0000 ;int22
      000064 82 00 00 00            137 	int 0x0000 ;int23
      000068 82 00 00 00            138 	int 0x0000 ;int24
      00006C 82 00 00 00            139 	int 0x0000 ;int25
      000070 82 00 00 00            140 	int 0x0000 ;int26
      000074 82 00 00 00            141 	int 0x0000 ;int27
      000078 82 00 00 00            142 	int 0x0000 ;int28
      00007C 82 00 00 00            143 	int 0x0000 ;int29
                                    144 ;--------------------------------------------------------
                                    145 ; global & static initialisations
                                    146 ;--------------------------------------------------------
                                    147 	.area HOME
                                    148 	.area GSINIT
                                    149 	.area GSFINAL
                                    150 	.area GSINIT
      000000                        151 __sdcc_gs_init_startup:
      000000                        152 __sdcc_init_data:
                                    153 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  154 	ldw x, #l_DATA
      000003 27 07            [ 1]  155 	jreq	00002$
      000005                        156 00001$:
      000005 72 4FuFFuFF      [ 1]  157 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  158 	decw x
      00000A 26 F9            [ 1]  159 	jrne	00001$
      00000C                        160 00002$:
      00000C AEr00r00         [ 2]  161 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  162 	jreq	00004$
      000011                        163 00003$:
      000011 D6uFFuFF         [ 1]  164 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  165 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  166 	decw	x
      000018 26 F7            [ 1]  167 	jrne	00003$
      00001A                        168 00004$:
                                    169 ; stm8_genXINIT() end
                                    170 	.area GSFINAL
      000000 CCr00r80         [ 2]  171 	jp	__sdcc_program_startup
                                    172 ;--------------------------------------------------------
                                    173 ; Home
                                    174 ;--------------------------------------------------------
                                    175 	.area HOME
                                    176 	.area HOME
      000080                        177 __sdcc_program_startup:
      000080 CCr05rF2         [ 2]  178 	jp	_main
                                    179 ;	return from main will return to caller
                                    180 ;--------------------------------------------------------
                                    181 ; code
                                    182 ;--------------------------------------------------------
                                    183 	.area CODE
                                    184 ;	joysticksend.c: 32: void delayTenMicro (void) {
                                    185 ;	-----------------------------------------
                                    186 ;	 function delayTenMicro
                                    187 ;	-----------------------------------------
      000000                        188 _delayTenMicro:
                                    189 ;	joysticksend.c: 34: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  190 	ld	a, #0x32
      000002                        191 00104$:
                                    192 ;	joysticksend.c: 35: __asm__("nop");
      000002 9D               [ 1]  193 	nop
      000003 4A               [ 1]  194 	dec	a
                                    195 ;	joysticksend.c: 34: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  196 	tnz	a
      000005 26 FB            [ 1]  197 	jrne	00104$
      000007 81               [ 4]  198 	ret
                                    199 ;	joysticksend.c: 37: UCHAR write_spi (UCHAR value) {
                                    200 ;	-----------------------------------------
                                    201 ;	 function write_spi
                                    202 ;	-----------------------------------------
      000008                        203 _write_spi:
                                    204 ;	joysticksend.c: 39: delayTenMicro ();
      000008 CDr00r00         [ 4]  205 	call	_delayTenMicro
                                    206 ;	joysticksend.c: 40: SPI_DR = value;
      00000B AE 52 04         [ 2]  207 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  208 	ld	a, (0x03, sp)
      000010 F7               [ 1]  209 	ld	(x), a
                                    210 ;	joysticksend.c: 41: delayTenMicro ();
      000011 CDr00r00         [ 4]  211 	call	_delayTenMicro
                                    212 ;	joysticksend.c: 42: while ((SPI_SR & TXE) == 0);
      000014                        213 00101$:
      000014 AE 52 03         [ 2]  214 	ldw	x, #0x5203
      000017 F6               [ 1]  215 	ld	a, (x)
      000018 A5 02            [ 1]  216 	bcp	a, #0x02
      00001A 27 F8            [ 1]  217 	jreq	00101$
                                    218 ;	joysticksend.c: 43: delayTenMicro ();
      00001C CDr00r00         [ 4]  219 	call	_delayTenMicro
                                    220 ;	joysticksend.c: 44: while ((SPI_SR & RXNE) == 0);
      00001F                        221 00104$:
      00001F AE 52 03         [ 2]  222 	ldw	x, #0x5203
      000022 F6               [ 1]  223 	ld	a, (x)
      000023 44               [ 1]  224 	srl	a
      000024 24 F9            [ 1]  225 	jrnc	00104$
                                    226 ;	joysticksend.c: 45: delayTenMicro ();
      000026 CDr00r00         [ 4]  227 	call	_delayTenMicro
                                    228 ;	joysticksend.c: 46: ret = SPI_DR;
      000029 AE 52 04         [ 2]  229 	ldw	x, #0x5204
      00002C F6               [ 1]  230 	ld	a, (x)
                                    231 ;	joysticksend.c: 47: return (ret);
      00002D 81               [ 4]  232 	ret
                                    233 ;	joysticksend.c: 49: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    234 ;	-----------------------------------------
                                    235 ;	 function write_spi_reg
                                    236 ;	-----------------------------------------
      00002E                        237 _write_spi_reg:
      00002E 88               [ 1]  238 	push	a
                                    239 ;	joysticksend.c: 51: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  240 	ldw	x, #0x500a
      000032 F6               [ 1]  241 	ld	a, (x)
      000033 A4 F7            [ 1]  242 	and	a, #0xf7
      000035 F7               [ 1]  243 	ld	(x), a
                                    244 ;	joysticksend.c: 52: ret = write_spi (reg);
      000036 7B 04            [ 1]  245 	ld	a, (0x04, sp)
      000038 88               [ 1]  246 	push	a
      000039 CDr00r08         [ 4]  247 	call	_write_spi
      00003C 5B 01            [ 2]  248 	addw	sp, #1
      00003E 6B 01            [ 1]  249 	ld	(0x01, sp), a
                                    250 ;	joysticksend.c: 53: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  251 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  252 	cp	a, #0xff
      000044 27 15            [ 1]  253 	jreq	00102$
      000046 7B 04            [ 1]  254 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  255 	cp	a, #0xe2
      00004A 27 0F            [ 1]  256 	jreq	00102$
      00004C 7B 04            [ 1]  257 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  258 	cp	a, #0xe1
      000050 27 09            [ 1]  259 	jreq	00102$
                                    260 ;	joysticksend.c: 54: write_spi (value);
      000052 7B 05            [ 1]  261 	ld	a, (0x05, sp)
      000054 88               [ 1]  262 	push	a
      000055 CDr00r08         [ 4]  263 	call	_write_spi
      000058 84               [ 1]  264 	pop	a
      000059 20 03            [ 2]  265 	jra	00103$
      00005B                        266 00102$:
                                    267 ;	joysticksend.c: 56: delayTenMicro ();
      00005B CDr00r00         [ 4]  268 	call	_delayTenMicro
      00005E                        269 00103$:
                                    270 ;	joysticksend.c: 57: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  271 	ldw	x, #0x500a
      000061 F6               [ 1]  272 	ld	a, (x)
      000062 AA 08            [ 1]  273 	or	a, #0x08
      000064 F7               [ 1]  274 	ld	(x), a
                                    275 ;	joysticksend.c: 58: return (ret);
      000065 7B 01            [ 1]  276 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  277 	addw	sp, #1
      000069 81               [ 4]  278 	ret
                                    279 ;	joysticksend.c: 60: UCHAR read_spi_reg (UCHAR reg) {
                                    280 ;	-----------------------------------------
                                    281 ;	 function read_spi_reg
                                    282 ;	-----------------------------------------
      00006A                        283 _read_spi_reg:
      00006A 88               [ 1]  284 	push	a
                                    285 ;	joysticksend.c: 62: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  286 	ldw	x, #0x500a
      00006E F6               [ 1]  287 	ld	a, (x)
      00006F A4 F7            [ 1]  288 	and	a, #0xf7
      000071 F7               [ 1]  289 	ld	(x), a
                                    290 ;	joysticksend.c: 63: ret = write_spi (reg);
      000072 7B 04            [ 1]  291 	ld	a, (0x04, sp)
      000074 88               [ 1]  292 	push	a
      000075 CDr00r08         [ 4]  293 	call	_write_spi
      000078 5B 01            [ 2]  294 	addw	sp, #1
      00007A 6B 01            [ 1]  295 	ld	(0x01, sp), a
                                    296 ;	joysticksend.c: 64: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  297 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  298 	cp	a, #0xff
      000080 27 17            [ 1]  299 	jreq	00102$
      000082 7B 04            [ 1]  300 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  301 	cp	a, #0xe2
      000086 27 11            [ 1]  302 	jreq	00102$
      000088 7B 04            [ 1]  303 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  304 	cp	a, #0xe1
      00008C 27 0B            [ 1]  305 	jreq	00102$
                                    306 ;	joysticksend.c: 65: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  307 	push	#0xff
      000090 CDr00r08         [ 4]  308 	call	_write_spi
      000093 5B 01            [ 2]  309 	addw	sp, #1
      000095 6B 01            [ 1]  310 	ld	(0x01, sp), a
      000097 20 03            [ 2]  311 	jra	00103$
      000099                        312 00102$:
                                    313 ;	joysticksend.c: 67: delayTenMicro ();
      000099 CDr00r00         [ 4]  314 	call	_delayTenMicro
      00009C                        315 00103$:
                                    316 ;	joysticksend.c: 68: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  317 	ldw	x, #0x500a
      00009F F6               [ 1]  318 	ld	a, (x)
      0000A0 AA 08            [ 1]  319 	or	a, #0x08
      0000A2 F7               [ 1]  320 	ld	(x), a
                                    321 ;	joysticksend.c: 69: return (ret);
      0000A3 7B 01            [ 1]  322 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  323 	addw	sp, #1
      0000A7 81               [ 4]  324 	ret
                                    325 ;	joysticksend.c: 71: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    326 ;	-----------------------------------------
                                    327 ;	 function write_spi_buf
                                    328 ;	-----------------------------------------
      0000A8                        329 _write_spi_buf:
      0000A8 52 02            [ 2]  330 	sub	sp, #2
                                    331 ;	joysticksend.c: 73: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  332 	ldw	x, #0x500a
      0000AD F6               [ 1]  333 	ld	a, (x)
      0000AE A4 F7            [ 1]  334 	and	a, #0xf7
      0000B0 F7               [ 1]  335 	ld	(x), a
                                    336 ;	joysticksend.c: 74: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  337 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  338 	push	a
      0000B4 CDr00r08         [ 4]  339 	call	_write_spi
      0000B7 5B 01            [ 2]  340 	addw	sp, #1
      0000B9 6B 02            [ 1]  341 	ld	(0x02, sp), a
                                    342 ;	joysticksend.c: 75: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  343 	clr	(0x01, sp)
      0000BD                        344 00103$:
      0000BD 7B 01            [ 1]  345 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  346 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  347 	jrnc	00101$
                                    348 ;	joysticksend.c: 76: write_spi (array[n]);
      0000C3 5F               [ 1]  349 	clrw	x
      0000C4 7B 01            [ 1]  350 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  351 	ld	xl, a
      0000C7 72 FB 06         [ 2]  352 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  353 	ld	a, (x)
      0000CB 88               [ 1]  354 	push	a
      0000CC CDr00r08         [ 4]  355 	call	_write_spi
      0000CF 84               [ 1]  356 	pop	a
                                    357 ;	joysticksend.c: 75: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  358 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  359 	jra	00103$
      0000D4                        360 00101$:
                                    361 ;	joysticksend.c: 77: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  362 	ldw	x, #0x500a
      0000D7 F6               [ 1]  363 	ld	a, (x)
      0000D8 AA 08            [ 1]  364 	or	a, #0x08
      0000DA F7               [ 1]  365 	ld	(x), a
                                    366 ;	joysticksend.c: 78: return (ret);
      0000DB 7B 02            [ 1]  367 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  368 	addw	sp, #2
      0000DF 81               [ 4]  369 	ret
                                    370 ;	joysticksend.c: 80: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    371 ;	-----------------------------------------
                                    372 ;	 function read_spi_buf
                                    373 ;	-----------------------------------------
      0000E0                        374 _read_spi_buf:
      0000E0 52 02            [ 2]  375 	sub	sp, #2
                                    376 ;	joysticksend.c: 82: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  377 	ldw	x, #0x500a
      0000E5 F6               [ 1]  378 	ld	a, (x)
      0000E6 A4 F7            [ 1]  379 	and	a, #0xf7
      0000E8 F7               [ 1]  380 	ld	(x), a
                                    381 ;	joysticksend.c: 83: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  382 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  383 	push	a
      0000EC CDr00r08         [ 4]  384 	call	_write_spi
      0000EF 5B 01            [ 2]  385 	addw	sp, #1
      0000F1 6B 01            [ 1]  386 	ld	(0x01, sp), a
                                    387 ;	joysticksend.c: 84: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  388 	clr	(0x02, sp)
      0000F5                        389 00103$:
      0000F5 7B 02            [ 1]  390 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  391 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  392 	jrnc	00101$
                                    393 ;	joysticksend.c: 85: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  394 	clrw	x
      0000FC 7B 02            [ 1]  395 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  396 	ld	xl, a
      0000FF 72 FB 06         [ 2]  397 	addw	x, (0x06, sp)
      000102 89               [ 2]  398 	pushw	x
      000103 4B FF            [ 1]  399 	push	#0xff
      000105 CDr00r08         [ 4]  400 	call	_write_spi
      000108 5B 01            [ 2]  401 	addw	sp, #1
      00010A 85               [ 2]  402 	popw	x
      00010B F7               [ 1]  403 	ld	(x), a
                                    404 ;	joysticksend.c: 84: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  405 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  406 	jra	00103$
      000110                        407 00101$:
                                    408 ;	joysticksend.c: 86: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  409 	ldw	x, #0x500a
      000113 F6               [ 1]  410 	ld	a, (x)
      000114 AA 08            [ 1]  411 	or	a, #0x08
      000116 F7               [ 1]  412 	ld	(x), a
                                    413 ;	joysticksend.c: 87: return (ret);
      000117 7B 01            [ 1]  414 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  415 	addw	sp, #2
      00011B 81               [ 4]  416 	ret
                                    417 ;	joysticksend.c: 89: void InitializeSPI () {
                                    418 ;	-----------------------------------------
                                    419 ;	 function InitializeSPI
                                    420 ;	-----------------------------------------
      00011C                        421 _InitializeSPI:
                                    422 ;	joysticksend.c: 90: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  423 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  424 	ld	a, #0x7c
      000121 F7               [ 1]  425 	ld	(x), a
                                    426 ;	joysticksend.c: 91: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  427 	ldw	x, #0x5201
      000125 7F               [ 1]  428 	clr	(x)
                                    429 ;	joysticksend.c: 92: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  430 	ldw	x, #0x5202
      000129 7F               [ 1]  431 	clr	(x)
                                    432 ;	joysticksend.c: 93: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  433 	ldw	x, #0x500c
      00012D A6 18            [ 1]  434 	ld	a, #0x18
      00012F F7               [ 1]  435 	ld	(x), a
                                    436 ;	joysticksend.c: 94: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  437 	ldw	x, #0x500d
      000133 A6 18            [ 1]  438 	ld	a, #0x18
      000135 F7               [ 1]  439 	ld	(x), a
                                    440 ;	joysticksend.c: 95: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  441 	ldw	x, #0x500e
      000139 A6 18            [ 1]  442 	ld	a, #0x18
      00013B F7               [ 1]  443 	ld	(x), a
                                    444 ;	joysticksend.c: 97: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  445 	ldw	x, #0x500a
      00013F F6               [ 1]  446 	ld	a, (x)
      000140 A4 EF            [ 1]  447 	and	a, #0xef
      000142 F7               [ 1]  448 	ld	(x), a
      000143 81               [ 4]  449 	ret
                                    450 ;	joysticksend.c: 99: void InitializeSystemClock() {
                                    451 ;	-----------------------------------------
                                    452 ;	 function InitializeSystemClock
                                    453 ;	-----------------------------------------
      000144                        454 _InitializeSystemClock:
                                    455 ;	joysticksend.c: 100: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  456 	ldw	x, #0x50c0
      000147 7F               [ 1]  457 	clr	(x)
                                    458 ;	joysticksend.c: 101: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  459 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  460 	ld	a, #0x01
      00014D F7               [ 1]  461 	ld	(x), a
                                    462 ;	joysticksend.c: 102: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  463 	ldw	x, #0x50c1
      000151 7F               [ 1]  464 	clr	(x)
                                    465 ;	joysticksend.c: 103: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        466 00101$:
      000152 AE 50 C0         [ 2]  467 	ldw	x, #0x50c0
      000155 F6               [ 1]  468 	ld	a, (x)
      000156 A5 02            [ 1]  469 	bcp	a, #0x02
      000158 27 F8            [ 1]  470 	jreq	00101$
                                    471 ;	joysticksend.c: 104: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  472 	ldw	x, #0x50c6
      00015D 7F               [ 1]  473 	clr	(x)
                                    474 ;	joysticksend.c: 105: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  475 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  476 	ld	a, #0xff
      000163 F7               [ 1]  477 	ld	(x), a
                                    478 ;	joysticksend.c: 106: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  479 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  480 	ld	a, #0xff
      000169 F7               [ 1]  481 	ld	(x), a
                                    482 ;	joysticksend.c: 107: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  483 	ldw	x, #0x50c9
      00016D 7F               [ 1]  484 	clr	(x)
                                    485 ;	joysticksend.c: 108: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  486 	ldw	x, #0x50cc
      000171 7F               [ 1]  487 	clr	(x)
                                    488 ;	joysticksend.c: 109: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  489 	ldw	x, #0x50cd
      000175 7F               [ 1]  490 	clr	(x)
                                    491 ;	joysticksend.c: 110: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  492 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  493 	ld	a, #0xe1
      00017B F7               [ 1]  494 	ld	(x), a
                                    495 ;	joysticksend.c: 111: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  496 	ldw	x, #0x50c5
      00017F 7F               [ 1]  497 	clr	(x)
                                    498 ;	joysticksend.c: 112: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  499 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  500 	ld	a, #0x02
      000185 F7               [ 1]  501 	ld	(x), a
                                    502 ;	joysticksend.c: 113: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        503 00104$:
      000186 AE 50 C5         [ 2]  504 	ldw	x, #0x50c5
      000189 F6               [ 1]  505 	ld	a, (x)
      00018A 44               [ 1]  506 	srl	a
      00018B 25 F9            [ 1]  507 	jrc	00104$
      00018D 81               [ 4]  508 	ret
                                    509 ;	joysticksend.c: 115: void delay (int time_ms) {
                                    510 ;	-----------------------------------------
                                    511 ;	 function delay
                                    512 ;	-----------------------------------------
      00018E                        513 _delay:
      00018E 52 0A            [ 2]  514 	sub	sp, #10
                                    515 ;	joysticksend.c: 117: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  516 	clrw	x
      000191 1F 03            [ 2]  517 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  518 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  519 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  520 	pushw	x
      000198 4B 0C            [ 1]  521 	push	#0x0c
      00019A 4B 04            [ 1]  522 	push	#0x04
      00019C CDr00r00         [ 4]  523 	call	__mulint
      00019F 5B 04            [ 2]  524 	addw	sp, #4
      0001A1 1F 05            [ 2]  525 	ldw	(0x05, sp), x
      0001A3                        526 00103$:
      0001A3 16 05            [ 2]  527 	ldw	y, (0x05, sp)
      0001A5 17 09            [ 2]  528 	ldw	(0x09, sp), y
      0001A7 7B 09            [ 1]  529 	ld	a, (0x09, sp)
      0001A9 49               [ 1]  530 	rlc	a
      0001AA 4F               [ 1]  531 	clr	a
      0001AB A2 00            [ 1]  532 	sbc	a, #0x00
      0001AD 6B 08            [ 1]  533 	ld	(0x08, sp), a
      0001AF 6B 07            [ 1]  534 	ld	(0x07, sp), a
      0001B1 1E 03            [ 2]  535 	ldw	x, (0x03, sp)
      0001B3 13 09            [ 2]  536 	cpw	x, (0x09, sp)
      0001B5 7B 02            [ 1]  537 	ld	a, (0x02, sp)
      0001B7 12 08            [ 1]  538 	sbc	a, (0x08, sp)
      0001B9 7B 01            [ 1]  539 	ld	a, (0x01, sp)
      0001BB 12 07            [ 1]  540 	sbc	a, (0x07, sp)
      0001BD 2E 17            [ 1]  541 	jrsge	00105$
                                    542 ;	joysticksend.c: 118: __asm__("nop");
      0001BF 9D               [ 1]  543 	nop
                                    544 ;	joysticksend.c: 117: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  545 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  546 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  547 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  548 	adc	a, #0x00
      0001CA 97               [ 1]  549 	ld	xl, a
      0001CB 7B 01            [ 1]  550 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  551 	adc	a, #0x00
      0001CF 95               [ 1]  552 	ld	xh, a
      0001D0 17 03            [ 2]  553 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  554 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  555 	jra	00103$
      0001D6                        556 00105$:
      0001D6 5B 0A            [ 2]  557 	addw	sp, #10
      0001D8 81               [ 4]  558 	ret
                                    559 ;	joysticksend.c: 192: void init_io(void)
                                    560 ;	-----------------------------------------
                                    561 ;	 function init_io
                                    562 ;	-----------------------------------------
      0001D9                        563 _init_io:
                                    564 ;	joysticksend.c: 201: PC_ODR &= ~(1 << CE);
      0001D9 AE 50 0A         [ 2]  565 	ldw	x, #0x500a
      0001DC F6               [ 1]  566 	ld	a, (x)
      0001DD A4 EF            [ 1]  567 	and	a, #0xef
      0001DF F7               [ 1]  568 	ld	(x), a
                                    569 ;	joysticksend.c: 203: PC_ODR |= (1 << CSN);
      0001E0 AE 50 0A         [ 2]  570 	ldw	x, #0x500a
      0001E3 F6               [ 1]  571 	ld	a, (x)
      0001E4 AA 08            [ 1]  572 	or	a, #0x08
      0001E6 F7               [ 1]  573 	ld	(x), a
      0001E7 81               [ 4]  574 	ret
                                    575 ;	joysticksend.c: 209: void rf_switch_bank(unsigned char bankindex)
                                    576 ;	-----------------------------------------
                                    577 ;	 function rf_switch_bank
                                    578 ;	-----------------------------------------
      0001E8                        579 _rf_switch_bank:
      0001E8 88               [ 1]  580 	push	a
                                    581 ;	joysticksend.c: 212: temp1 = bankindex;
      0001E9 7B 04            [ 1]  582 	ld	a, (0x04, sp)
      0001EB 6B 01            [ 1]  583 	ld	(0x01, sp), a
                                    584 ;	joysticksend.c: 214: temp0 = write_spi(iRF_BANK0_STATUS);
      0001ED 4B 07            [ 1]  585 	push	#0x07
      0001EF CDr00r08         [ 4]  586 	call	_write_spi
      0001F2 5B 01            [ 2]  587 	addw	sp, #1
                                    588 ;	joysticksend.c: 216: if((temp0&0x80)!=temp1)
      0001F4 A4 80            [ 1]  589 	and	a, #0x80
      0001F6 11 01            [ 1]  590 	cp	a, (0x01, sp)
      0001F8 27 09            [ 1]  591 	jreq	00103$
                                    592 ;	joysticksend.c: 218: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0001FA 4B 53            [ 1]  593 	push	#0x53
      0001FC 4B 50            [ 1]  594 	push	#0x50
      0001FE CDr00r2E         [ 4]  595 	call	_write_spi_reg
      000201 5B 02            [ 2]  596 	addw	sp, #2
      000203                        597 00103$:
      000203 84               [ 1]  598 	pop	a
      000204 81               [ 4]  599 	ret
                                    600 ;	joysticksend.c: 225: void SE8R01_Calibration()
                                    601 ;	-----------------------------------------
                                    602 ;	 function SE8R01_Calibration
                                    603 ;	-----------------------------------------
      000205                        604 _SE8R01_Calibration:
      000205 52 0D            [ 2]  605 	sub	sp, #13
                                    606 ;	joysticksend.c: 228: rf_switch_bank(iBANK0);
      000207 4B 00            [ 1]  607 	push	#0x00
      000209 CDr01rE8         [ 4]  608 	call	_rf_switch_bank
      00020C 84               [ 1]  609 	pop	a
                                    610 ;	joysticksend.c: 229: temp[0]=0x03;
      00020D 96               [ 1]  611 	ldw	x, sp
      00020E 5C               [ 2]  612 	incw	x
      00020F 1F 0C            [ 2]  613 	ldw	(0x0c, sp), x
      000211 1E 0C            [ 2]  614 	ldw	x, (0x0c, sp)
      000213 A6 03            [ 1]  615 	ld	a, #0x03
      000215 F7               [ 1]  616 	ld	(x), a
                                    617 ;	joysticksend.c: 230: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      000216 1E 0C            [ 2]  618 	ldw	x, (0x0c, sp)
      000218 4B 01            [ 1]  619 	push	#0x01
      00021A 89               [ 2]  620 	pushw	x
      00021B 4B 20            [ 1]  621 	push	#0x20
      00021D CDr00rA8         [ 4]  622 	call	_write_spi_buf
      000220 5B 04            [ 2]  623 	addw	sp, #4
                                    624 ;	joysticksend.c: 232: temp[0]=0x32;
      000222 1E 0C            [ 2]  625 	ldw	x, (0x0c, sp)
      000224 A6 32            [ 1]  626 	ld	a, #0x32
      000226 F7               [ 1]  627 	ld	(x), a
                                    628 ;	joysticksend.c: 234: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      000227 1E 0C            [ 2]  629 	ldw	x, (0x0c, sp)
      000229 4B 01            [ 1]  630 	push	#0x01
      00022B 89               [ 2]  631 	pushw	x
      00022C 4B 25            [ 1]  632 	push	#0x25
      00022E CDr00rA8         [ 4]  633 	call	_write_spi_buf
      000231 5B 04            [ 2]  634 	addw	sp, #4
                                    635 ;	joysticksend.c: 238: if (SE8R01_DR_2M==1)
      000233 CEu00u00         [ 2]  636 	ldw	x, _SE8R01_DR_2M+0
      000236 A3 00 01         [ 2]  637 	cpw	x, #0x0001
      000239 26 07            [ 1]  638 	jrne	00105$
                                    639 ;	joysticksend.c: 239: {temp[0]=0x48;}
      00023B 1E 0C            [ 2]  640 	ldw	x, (0x0c, sp)
      00023D A6 48            [ 1]  641 	ld	a, #0x48
      00023F F7               [ 1]  642 	ld	(x), a
      000240 20 14            [ 2]  643 	jra	00106$
      000242                        644 00105$:
                                    645 ;	joysticksend.c: 240: else if (SE8R01_DR_1M==1)
      000242 CEu00u02         [ 2]  646 	ldw	x, _SE8R01_DR_1M+0
      000245 A3 00 01         [ 2]  647 	cpw	x, #0x0001
      000248 26 07            [ 1]  648 	jrne	00102$
                                    649 ;	joysticksend.c: 241: {temp[0]=0x40;}
      00024A 1E 0C            [ 2]  650 	ldw	x, (0x0c, sp)
      00024C A6 40            [ 1]  651 	ld	a, #0x40
      00024E F7               [ 1]  652 	ld	(x), a
      00024F 20 05            [ 2]  653 	jra	00106$
      000251                        654 00102$:
                                    655 ;	joysticksend.c: 243: {temp[0]=0x68;}   
      000251 1E 0C            [ 2]  656 	ldw	x, (0x0c, sp)
      000253 A6 68            [ 1]  657 	ld	a, #0x68
      000255 F7               [ 1]  658 	ld	(x), a
      000256                        659 00106$:
                                    660 ;	joysticksend.c: 245: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000256 1E 0C            [ 2]  661 	ldw	x, (0x0c, sp)
      000258 4B 01            [ 1]  662 	push	#0x01
      00025A 89               [ 2]  663 	pushw	x
      00025B 4B 26            [ 1]  664 	push	#0x26
      00025D CDr00rA8         [ 4]  665 	call	_write_spi_buf
      000260 5B 04            [ 2]  666 	addw	sp, #4
                                    667 ;	joysticksend.c: 246: temp[0]=0x77;
      000262 1E 0C            [ 2]  668 	ldw	x, (0x0c, sp)
      000264 A6 77            [ 1]  669 	ld	a, #0x77
      000266 F7               [ 1]  670 	ld	(x), a
                                    671 ;	joysticksend.c: 247: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      000267 1E 0C            [ 2]  672 	ldw	x, (0x0c, sp)
      000269 4B 01            [ 1]  673 	push	#0x01
      00026B 89               [ 2]  674 	pushw	x
      00026C 4B 3F            [ 1]  675 	push	#0x3f
      00026E CDr00rA8         [ 4]  676 	call	_write_spi_buf
      000271 5B 04            [ 2]  677 	addw	sp, #4
                                    678 ;	joysticksend.c: 249: rf_switch_bank(iBANK1);
      000273 4B 80            [ 1]  679 	push	#0x80
      000275 CDr01rE8         [ 4]  680 	call	_rf_switch_bank
      000278 84               [ 1]  681 	pop	a
                                    682 ;	joysticksend.c: 250: temp[0]=0x40;
      000279 1E 0C            [ 2]  683 	ldw	x, (0x0c, sp)
      00027B A6 40            [ 1]  684 	ld	a, #0x40
      00027D F7               [ 1]  685 	ld	(x), a
                                    686 ;	joysticksend.c: 251: temp[1]=0x00;
      00027E 1E 0C            [ 2]  687 	ldw	x, (0x0c, sp)
      000280 5C               [ 2]  688 	incw	x
      000281 1F 0A            [ 2]  689 	ldw	(0x0a, sp), x
      000283 1E 0A            [ 2]  690 	ldw	x, (0x0a, sp)
      000285 7F               [ 1]  691 	clr	(x)
                                    692 ;	joysticksend.c: 252: temp[2]=0x10;
      000286 1E 0C            [ 2]  693 	ldw	x, (0x0c, sp)
      000288 5C               [ 2]  694 	incw	x
      000289 5C               [ 2]  695 	incw	x
      00028A 1F 08            [ 2]  696 	ldw	(0x08, sp), x
      00028C 1E 08            [ 2]  697 	ldw	x, (0x08, sp)
      00028E A6 10            [ 1]  698 	ld	a, #0x10
      000290 F7               [ 1]  699 	ld	(x), a
                                    700 ;	joysticksend.c: 254: {temp[3]=0xE6;}
      000291 1E 0C            [ 2]  701 	ldw	x, (0x0c, sp)
      000293 1C 00 03         [ 2]  702 	addw	x, #0x0003
      000296 1F 06            [ 2]  703 	ldw	(0x06, sp), x
                                    704 ;	joysticksend.c: 253: if (SE8R01_DR_2M==1)
      000298 CEu00u00         [ 2]  705 	ldw	x, _SE8R01_DR_2M+0
      00029B A3 00 01         [ 2]  706 	cpw	x, #0x0001
      00029E 26 07            [ 1]  707 	jrne	00108$
                                    708 ;	joysticksend.c: 254: {temp[3]=0xE6;}
      0002A0 1E 06            [ 2]  709 	ldw	x, (0x06, sp)
      0002A2 A6 E6            [ 1]  710 	ld	a, #0xe6
      0002A4 F7               [ 1]  711 	ld	(x), a
      0002A5 20 05            [ 2]  712 	jra	00109$
      0002A7                        713 00108$:
                                    714 ;	joysticksend.c: 256: {temp[3]=0xE4;}
      0002A7 1E 06            [ 2]  715 	ldw	x, (0x06, sp)
      0002A9 A6 E4            [ 1]  716 	ld	a, #0xe4
      0002AB F7               [ 1]  717 	ld	(x), a
      0002AC                        718 00109$:
                                    719 ;	joysticksend.c: 258: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      0002AC 1E 0C            [ 2]  720 	ldw	x, (0x0c, sp)
      0002AE 4B 04            [ 1]  721 	push	#0x04
      0002B0 89               [ 2]  722 	pushw	x
      0002B1 4B 21            [ 1]  723 	push	#0x21
      0002B3 CDr00rA8         [ 4]  724 	call	_write_spi_buf
      0002B6 5B 04            [ 2]  725 	addw	sp, #4
                                    726 ;	joysticksend.c: 260: temp[0]=0x20;
      0002B8 1E 0C            [ 2]  727 	ldw	x, (0x0c, sp)
      0002BA A6 20            [ 1]  728 	ld	a, #0x20
      0002BC F7               [ 1]  729 	ld	(x), a
                                    730 ;	joysticksend.c: 261: temp[1]=0x08;
      0002BD 1E 0A            [ 2]  731 	ldw	x, (0x0a, sp)
      0002BF A6 08            [ 1]  732 	ld	a, #0x08
      0002C1 F7               [ 1]  733 	ld	(x), a
                                    734 ;	joysticksend.c: 262: temp[2]=0x50;
      0002C2 1E 08            [ 2]  735 	ldw	x, (0x08, sp)
      0002C4 A6 50            [ 1]  736 	ld	a, #0x50
      0002C6 F7               [ 1]  737 	ld	(x), a
                                    738 ;	joysticksend.c: 263: temp[3]=0x40;
      0002C7 1E 06            [ 2]  739 	ldw	x, (0x06, sp)
      0002C9 A6 40            [ 1]  740 	ld	a, #0x40
      0002CB F7               [ 1]  741 	ld	(x), a
                                    742 ;	joysticksend.c: 264: temp[4]=0x50;
      0002CC 1E 0C            [ 2]  743 	ldw	x, (0x0c, sp)
      0002CE A6 50            [ 1]  744 	ld	a, #0x50
      0002D0 E7 04            [ 1]  745 	ld	(0x0004, x), a
                                    746 ;	joysticksend.c: 265: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0002D2 1E 0C            [ 2]  747 	ldw	x, (0x0c, sp)
      0002D4 4B 05            [ 1]  748 	push	#0x05
      0002D6 89               [ 2]  749 	pushw	x
      0002D7 4B 23            [ 1]  750 	push	#0x23
      0002D9 CDr00rA8         [ 4]  751 	call	_write_spi_buf
      0002DC 5B 04            [ 2]  752 	addw	sp, #4
                                    753 ;	joysticksend.c: 267: temp[0]=0x00;
      0002DE 1E 0C            [ 2]  754 	ldw	x, (0x0c, sp)
      0002E0 7F               [ 1]  755 	clr	(x)
                                    756 ;	joysticksend.c: 268: temp[1]=0x00;
      0002E1 1E 0A            [ 2]  757 	ldw	x, (0x0a, sp)
      0002E3 7F               [ 1]  758 	clr	(x)
                                    759 ;	joysticksend.c: 269: if (SE8R01_DR_2M==1)
      0002E4 CEu00u00         [ 2]  760 	ldw	x, _SE8R01_DR_2M+0
      0002E7 A3 00 01         [ 2]  761 	cpw	x, #0x0001
      0002EA 26 07            [ 1]  762 	jrne	00111$
                                    763 ;	joysticksend.c: 270: { temp[2]=0x1E;}
      0002EC 1E 08            [ 2]  764 	ldw	x, (0x08, sp)
      0002EE A6 1E            [ 1]  765 	ld	a, #0x1e
      0002F0 F7               [ 1]  766 	ld	(x), a
      0002F1 20 05            [ 2]  767 	jra	00112$
      0002F3                        768 00111$:
                                    769 ;	joysticksend.c: 272: { temp[2]=0x1F;}
      0002F3 1E 08            [ 2]  770 	ldw	x, (0x08, sp)
      0002F5 A6 1F            [ 1]  771 	ld	a, #0x1f
      0002F7 F7               [ 1]  772 	ld	(x), a
      0002F8                        773 00112$:
                                    774 ;	joysticksend.c: 274: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0002F8 1E 0C            [ 2]  775 	ldw	x, (0x0c, sp)
      0002FA 4B 03            [ 1]  776 	push	#0x03
      0002FC 89               [ 2]  777 	pushw	x
      0002FD 4B 2A            [ 1]  778 	push	#0x2a
      0002FF CDr00rA8         [ 4]  779 	call	_write_spi_buf
      000302 5B 04            [ 2]  780 	addw	sp, #4
                                    781 ;	joysticksend.c: 276: if (SE8R01_DR_2M==1)
      000304 CEu00u00         [ 2]  782 	ldw	x, _SE8R01_DR_2M+0
      000307 A3 00 01         [ 2]  783 	cpw	x, #0x0001
      00030A 26 07            [ 1]  784 	jrne	00114$
                                    785 ;	joysticksend.c: 277: { temp[0]=0x29;}
      00030C 1E 0C            [ 2]  786 	ldw	x, (0x0c, sp)
      00030E A6 29            [ 1]  787 	ld	a, #0x29
      000310 F7               [ 1]  788 	ld	(x), a
      000311 20 05            [ 2]  789 	jra	00115$
      000313                        790 00114$:
                                    791 ;	joysticksend.c: 279: { temp[0]=0x14;}
      000313 1E 0C            [ 2]  792 	ldw	x, (0x0c, sp)
      000315 A6 14            [ 1]  793 	ld	a, #0x14
      000317 F7               [ 1]  794 	ld	(x), a
      000318                        795 00115$:
                                    796 ;	joysticksend.c: 281: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      000318 1E 0C            [ 2]  797 	ldw	x, (0x0c, sp)
      00031A 4B 01            [ 1]  798 	push	#0x01
      00031C 89               [ 2]  799 	pushw	x
      00031D 4B 2C            [ 1]  800 	push	#0x2c
      00031F CDr00rA8         [ 4]  801 	call	_write_spi_buf
      000322 5B 04            [ 2]  802 	addw	sp, #4
                                    803 ;	joysticksend.c: 283: temp[0]=0x00;
      000324 1E 0C            [ 2]  804 	ldw	x, (0x0c, sp)
      000326 7F               [ 1]  805 	clr	(x)
                                    806 ;	joysticksend.c: 284: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      000327 1E 0C            [ 2]  807 	ldw	x, (0x0c, sp)
      000329 4B 01            [ 1]  808 	push	#0x01
      00032B 89               [ 2]  809 	pushw	x
      00032C 4B 37            [ 1]  810 	push	#0x37
      00032E CDr00rA8         [ 4]  811 	call	_write_spi_buf
      000331 5B 04            [ 2]  812 	addw	sp, #4
                                    813 ;	joysticksend.c: 286: temp[0]=0x7F;
      000333 1E 0C            [ 2]  814 	ldw	x, (0x0c, sp)
      000335 A6 7F            [ 1]  815 	ld	a, #0x7f
      000337 F7               [ 1]  816 	ld	(x), a
                                    817 ;	joysticksend.c: 287: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000338 1E 0C            [ 2]  818 	ldw	x, (0x0c, sp)
      00033A 4B 01            [ 1]  819 	push	#0x01
      00033C 89               [ 2]  820 	pushw	x
      00033D 4B 38            [ 1]  821 	push	#0x38
      00033F CDr00rA8         [ 4]  822 	call	_write_spi_buf
      000342 5B 04            [ 2]  823 	addw	sp, #4
                                    824 ;	joysticksend.c: 289: temp[0]=0x02;
      000344 1E 0C            [ 2]  825 	ldw	x, (0x0c, sp)
      000346 A6 02            [ 1]  826 	ld	a, #0x02
      000348 F7               [ 1]  827 	ld	(x), a
                                    828 ;	joysticksend.c: 290: temp[1]=0xC1;
      000349 1E 0A            [ 2]  829 	ldw	x, (0x0a, sp)
      00034B A6 C1            [ 1]  830 	ld	a, #0xc1
      00034D F7               [ 1]  831 	ld	(x), a
                                    832 ;	joysticksend.c: 291: temp[2]=0xEB;            
      00034E 1E 08            [ 2]  833 	ldw	x, (0x08, sp)
      000350 A6 EB            [ 1]  834 	ld	a, #0xeb
      000352 F7               [ 1]  835 	ld	(x), a
                                    836 ;	joysticksend.c: 292: temp[3]=0x1C;
      000353 1E 06            [ 2]  837 	ldw	x, (0x06, sp)
      000355 A6 1C            [ 1]  838 	ld	a, #0x1c
      000357 F7               [ 1]  839 	ld	(x), a
                                    840 ;	joysticksend.c: 293: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000358 1E 0C            [ 2]  841 	ldw	x, (0x0c, sp)
      00035A 4B 04            [ 1]  842 	push	#0x04
      00035C 89               [ 2]  843 	pushw	x
      00035D 4B 3D            [ 1]  844 	push	#0x3d
      00035F CDr00rA8         [ 4]  845 	call	_write_spi_buf
      000362 5B 04            [ 2]  846 	addw	sp, #4
                                    847 ;	joysticksend.c: 295: temp[0]=0x97;
      000364 1E 0C            [ 2]  848 	ldw	x, (0x0c, sp)
      000366 A6 97            [ 1]  849 	ld	a, #0x97
      000368 F7               [ 1]  850 	ld	(x), a
                                    851 ;	joysticksend.c: 296: temp[1]=0x64;
      000369 1E 0A            [ 2]  852 	ldw	x, (0x0a, sp)
      00036B A6 64            [ 1]  853 	ld	a, #0x64
      00036D F7               [ 1]  854 	ld	(x), a
                                    855 ;	joysticksend.c: 297: temp[2]=0x00;
      00036E 1E 08            [ 2]  856 	ldw	x, (0x08, sp)
      000370 7F               [ 1]  857 	clr	(x)
                                    858 ;	joysticksend.c: 298: temp[3]=0x81;
      000371 1E 06            [ 2]  859 	ldw	x, (0x06, sp)
      000373 A6 81            [ 1]  860 	ld	a, #0x81
      000375 F7               [ 1]  861 	ld	(x), a
                                    862 ;	joysticksend.c: 299: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000376 1E 0C            [ 2]  863 	ldw	x, (0x0c, sp)
      000378 4B 04            [ 1]  864 	push	#0x04
      00037A 89               [ 2]  865 	pushw	x
      00037B 4B 3E            [ 1]  866 	push	#0x3e
      00037D CDr00rA8         [ 4]  867 	call	_write_spi_buf
      000380 5B 04            [ 2]  868 	addw	sp, #4
                                    869 ;	joysticksend.c: 300: rf_switch_bank(iBANK0);
      000382 4B 00            [ 1]  870 	push	#0x00
      000384 CDr01rE8         [ 4]  871 	call	_rf_switch_bank
      000387 84               [ 1]  872 	pop	a
                                    873 ;	joysticksend.c: 305: delayTenMicro();
      000388 CDr00r00         [ 4]  874 	call	_delayTenMicro
                                    875 ;	joysticksend.c: 306: PC_ODR |= (1 << CE);
      00038B AE 50 0A         [ 2]  876 	ldw	x, #0x500a
      00038E F6               [ 1]  877 	ld	a, (x)
      00038F AA 10            [ 1]  878 	or	a, #0x10
      000391 F7               [ 1]  879 	ld	(x), a
                                    880 ;	joysticksend.c: 307: delayTenMicro();
      000392 CDr00r00         [ 4]  881 	call	_delayTenMicro
                                    882 ;	joysticksend.c: 308: delayTenMicro();
      000395 CDr00r00         [ 4]  883 	call	_delayTenMicro
                                    884 ;	joysticksend.c: 309: delayTenMicro();
      000398 CDr00r00         [ 4]  885 	call	_delayTenMicro
                                    886 ;	joysticksend.c: 310: PC_ODR &= ~(1 << CE);
      00039B AE 50 0A         [ 2]  887 	ldw	x, #0x500a
      00039E F6               [ 1]  888 	ld	a, (x)
      00039F A4 EF            [ 1]  889 	and	a, #0xef
      0003A1 F7               [ 1]  890 	ld	(x), a
                                    891 ;	joysticksend.c: 311: delay(50);                            // delay 50ms waitting for calibaration.
      0003A2 4B 32            [ 1]  892 	push	#0x32
      0003A4 4B 00            [ 1]  893 	push	#0x00
      0003A6 CDr01r8E         [ 4]  894 	call	_delay
      0003A9 5B 02            [ 2]  895 	addw	sp, #2
                                    896 ;	joysticksend.c: 316: delayTenMicro();
      0003AB CDr00r00         [ 4]  897 	call	_delayTenMicro
                                    898 ;	joysticksend.c: 317: PC_ODR |= (1 << CE);
      0003AE AE 50 0A         [ 2]  899 	ldw	x, #0x500a
      0003B1 F6               [ 1]  900 	ld	a, (x)
      0003B2 AA 10            [ 1]  901 	or	a, #0x10
      0003B4 F7               [ 1]  902 	ld	(x), a
                                    903 ;	joysticksend.c: 318: delayTenMicro();
      0003B5 CDr00r00         [ 4]  904 	call	_delayTenMicro
                                    905 ;	joysticksend.c: 319: delayTenMicro();
      0003B8 CDr00r00         [ 4]  906 	call	_delayTenMicro
                                    907 ;	joysticksend.c: 320: delayTenMicro();
      0003BB CDr00r00         [ 4]  908 	call	_delayTenMicro
                                    909 ;	joysticksend.c: 321: PC_ODR &= ~(1 << CE);
      0003BE AE 50 0A         [ 2]  910 	ldw	x, #0x500a
      0003C1 F6               [ 1]  911 	ld	a, (x)
      0003C2 A4 EF            [ 1]  912 	and	a, #0xef
      0003C4 F7               [ 1]  913 	ld	(x), a
                                    914 ;	joysticksend.c: 322: delay(50);                            // delay 50ms waitting for calibaration.
      0003C5 4B 32            [ 1]  915 	push	#0x32
      0003C7 4B 00            [ 1]  916 	push	#0x00
      0003C9 CDr01r8E         [ 4]  917 	call	_delay
      0003CC 5B 02            [ 2]  918 	addw	sp, #2
      0003CE 5B 0D            [ 2]  919 	addw	sp, #13
      0003D0 81               [ 4]  920 	ret
                                    921 ;	joysticksend.c: 326: void SE8R01_Analog_Init()           //SE8R01 初始化
                                    922 ;	-----------------------------------------
                                    923 ;	 function SE8R01_Analog_Init
                                    924 ;	-----------------------------------------
      0003D1                        925 _SE8R01_Analog_Init:
      0003D1 52 15            [ 2]  926 	sub	sp, #21
                                    927 ;	joysticksend.c: 331: gtemp[0]=0x28;
      0003D3 AEr00r00         [ 2]  928 	ldw	x, #_gtemp+0
      0003D6 1F 14            [ 2]  929 	ldw	(0x14, sp), x
      0003D8 1E 14            [ 2]  930 	ldw	x, (0x14, sp)
      0003DA A6 28            [ 1]  931 	ld	a, #0x28
      0003DC F7               [ 1]  932 	ld	(x), a
                                    933 ;	joysticksend.c: 332: gtemp[1]=0x32;
      0003DD 1E 14            [ 2]  934 	ldw	x, (0x14, sp)
      0003DF 5C               [ 2]  935 	incw	x
      0003E0 1F 12            [ 2]  936 	ldw	(0x12, sp), x
      0003E2 1E 12            [ 2]  937 	ldw	x, (0x12, sp)
      0003E4 A6 32            [ 1]  938 	ld	a, #0x32
      0003E6 F7               [ 1]  939 	ld	(x), a
                                    940 ;	joysticksend.c: 333: gtemp[2]=0x80;
      0003E7 1E 14            [ 2]  941 	ldw	x, (0x14, sp)
      0003E9 5C               [ 2]  942 	incw	x
      0003EA 5C               [ 2]  943 	incw	x
      0003EB 1F 10            [ 2]  944 	ldw	(0x10, sp), x
      0003ED 1E 10            [ 2]  945 	ldw	x, (0x10, sp)
      0003EF A6 80            [ 1]  946 	ld	a, #0x80
      0003F1 F7               [ 1]  947 	ld	(x), a
                                    948 ;	joysticksend.c: 334: gtemp[3]=0x90;
      0003F2 1E 14            [ 2]  949 	ldw	x, (0x14, sp)
      0003F4 1C 00 03         [ 2]  950 	addw	x, #0x0003
      0003F7 1F 0E            [ 2]  951 	ldw	(0x0e, sp), x
      0003F9 1E 0E            [ 2]  952 	ldw	x, (0x0e, sp)
      0003FB A6 90            [ 1]  953 	ld	a, #0x90
      0003FD F7               [ 1]  954 	ld	(x), a
                                    955 ;	joysticksend.c: 335: gtemp[4]=0x00;
      0003FE 1E 14            [ 2]  956 	ldw	x, (0x14, sp)
      000400 1C 00 04         [ 2]  957 	addw	x, #0x0004
      000403 7F               [ 1]  958 	clr	(x)
                                    959 ;	joysticksend.c: 336: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      000404 1E 14            [ 2]  960 	ldw	x, (0x14, sp)
      000406 4B 05            [ 1]  961 	push	#0x05
      000408 89               [ 2]  962 	pushw	x
      000409 4B 3E            [ 1]  963 	push	#0x3e
      00040B CDr00rA8         [ 4]  964 	call	_write_spi_buf
      00040E 5B 04            [ 2]  965 	addw	sp, #4
                                    966 ;	joysticksend.c: 337: delay(2);
      000410 4B 02            [ 1]  967 	push	#0x02
      000412 4B 00            [ 1]  968 	push	#0x00
      000414 CDr01r8E         [ 4]  969 	call	_delay
      000417 5B 02            [ 2]  970 	addw	sp, #2
                                    971 ;	joysticksend.c: 340: rf_switch_bank(iBANK1);
      000419 4B 80            [ 1]  972 	push	#0x80
      00041B CDr01rE8         [ 4]  973 	call	_rf_switch_bank
      00041E 84               [ 1]  974 	pop	a
                                    975 ;	joysticksend.c: 342: temp[0]=0x40;
      00041F 96               [ 1]  976 	ldw	x, sp
      000420 5C               [ 2]  977 	incw	x
      000421 1F 0C            [ 2]  978 	ldw	(0x0c, sp), x
      000423 1E 0C            [ 2]  979 	ldw	x, (0x0c, sp)
      000425 A6 40            [ 1]  980 	ld	a, #0x40
      000427 F7               [ 1]  981 	ld	(x), a
                                    982 ;	joysticksend.c: 343: temp[1]=0x01;               
      000428 1E 0C            [ 2]  983 	ldw	x, (0x0c, sp)
      00042A 5C               [ 2]  984 	incw	x
      00042B 1F 0A            [ 2]  985 	ldw	(0x0a, sp), x
      00042D 1E 0A            [ 2]  986 	ldw	x, (0x0a, sp)
      00042F A6 01            [ 1]  987 	ld	a, #0x01
      000431 F7               [ 1]  988 	ld	(x), a
                                    989 ;	joysticksend.c: 344: temp[2]=0x30;               
      000432 1E 0C            [ 2]  990 	ldw	x, (0x0c, sp)
      000434 5C               [ 2]  991 	incw	x
      000435 5C               [ 2]  992 	incw	x
      000436 1F 08            [ 2]  993 	ldw	(0x08, sp), x
      000438 1E 08            [ 2]  994 	ldw	x, (0x08, sp)
      00043A A6 30            [ 1]  995 	ld	a, #0x30
      00043C F7               [ 1]  996 	ld	(x), a
                                    997 ;	joysticksend.c: 346: { temp[3]=0xE2; }              
      00043D 1E 0C            [ 2]  998 	ldw	x, (0x0c, sp)
      00043F 1C 00 03         [ 2]  999 	addw	x, #0x0003
      000442 1F 06            [ 2] 1000 	ldw	(0x06, sp), x
                                   1001 ;	joysticksend.c: 345: if (SE8R01_DR_2M==1)
      000444 CEu00u00         [ 2] 1002 	ldw	x, _SE8R01_DR_2M+0
      000447 A3 00 01         [ 2] 1003 	cpw	x, #0x0001
      00044A 26 07            [ 1] 1004 	jrne	00102$
                                   1005 ;	joysticksend.c: 346: { temp[3]=0xE2; }              
      00044C 1E 06            [ 2] 1006 	ldw	x, (0x06, sp)
      00044E A6 E2            [ 1] 1007 	ld	a, #0xe2
      000450 F7               [ 1] 1008 	ld	(x), a
      000451 20 05            [ 2] 1009 	jra	00103$
      000453                       1010 00102$:
                                   1011 ;	joysticksend.c: 348: { temp[3]=0xE0;}
      000453 1E 06            [ 2] 1012 	ldw	x, (0x06, sp)
      000455 A6 E0            [ 1] 1013 	ld	a, #0xe0
      000457 F7               [ 1] 1014 	ld	(x), a
      000458                       1015 00103$:
                                   1016 ;	joysticksend.c: 350: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000458 1E 0C            [ 2] 1017 	ldw	x, (0x0c, sp)
      00045A 4B 04            [ 1] 1018 	push	#0x04
      00045C 89               [ 2] 1019 	pushw	x
      00045D 4B 21            [ 1] 1020 	push	#0x21
      00045F CDr00rA8         [ 4] 1021 	call	_write_spi_buf
      000462 5B 04            [ 2] 1022 	addw	sp, #4
                                   1023 ;	joysticksend.c: 352: temp[0]=0x29;
      000464 1E 0C            [ 2] 1024 	ldw	x, (0x0c, sp)
      000466 A6 29            [ 1] 1025 	ld	a, #0x29
      000468 F7               [ 1] 1026 	ld	(x), a
                                   1027 ;	joysticksend.c: 353: temp[1]=0x89;
      000469 1E 0A            [ 2] 1028 	ldw	x, (0x0a, sp)
      00046B A6 89            [ 1] 1029 	ld	a, #0x89
      00046D F7               [ 1] 1030 	ld	(x), a
                                   1031 ;	joysticksend.c: 354: temp[2]=0x55;                     
      00046E 1E 08            [ 2] 1032 	ldw	x, (0x08, sp)
      000470 A6 55            [ 1] 1033 	ld	a, #0x55
      000472 F7               [ 1] 1034 	ld	(x), a
                                   1035 ;	joysticksend.c: 355: temp[3]=0x40;
      000473 1E 06            [ 2] 1036 	ldw	x, (0x06, sp)
      000475 A6 40            [ 1] 1037 	ld	a, #0x40
      000477 F7               [ 1] 1038 	ld	(x), a
                                   1039 ;	joysticksend.c: 356: temp[4]=0x50;
      000478 1E 0C            [ 2] 1040 	ldw	x, (0x0c, sp)
      00047A A6 50            [ 1] 1041 	ld	a, #0x50
      00047C E7 04            [ 1] 1042 	ld	(0x0004, x), a
                                   1043 ;	joysticksend.c: 357: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      00047E 1E 0C            [ 2] 1044 	ldw	x, (0x0c, sp)
      000480 4B 05            [ 1] 1045 	push	#0x05
      000482 89               [ 2] 1046 	pushw	x
      000483 4B 23            [ 1] 1047 	push	#0x23
      000485 CDr00rA8         [ 4] 1048 	call	_write_spi_buf
      000488 5B 04            [ 2] 1049 	addw	sp, #4
                                   1050 ;	joysticksend.c: 359: if (SE8R01_DR_2M==1)
      00048A CEu00u00         [ 2] 1051 	ldw	x, _SE8R01_DR_2M+0
      00048D A3 00 01         [ 2] 1052 	cpw	x, #0x0001
      000490 26 07            [ 1] 1053 	jrne	00105$
                                   1054 ;	joysticksend.c: 360: { temp[0]=0x29;}
      000492 1E 0C            [ 2] 1055 	ldw	x, (0x0c, sp)
      000494 A6 29            [ 1] 1056 	ld	a, #0x29
      000496 F7               [ 1] 1057 	ld	(x), a
      000497 20 05            [ 2] 1058 	jra	00106$
      000499                       1059 00105$:
                                   1060 ;	joysticksend.c: 362: { temp[0]=0x14;}
      000499 1E 0C            [ 2] 1061 	ldw	x, (0x0c, sp)
      00049B A6 14            [ 1] 1062 	ld	a, #0x14
      00049D F7               [ 1] 1063 	ld	(x), a
      00049E                       1064 00106$:
                                   1065 ;	joysticksend.c: 364: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      00049E 1E 0C            [ 2] 1066 	ldw	x, (0x0c, sp)
      0004A0 4B 01            [ 1] 1067 	push	#0x01
      0004A2 89               [ 2] 1068 	pushw	x
      0004A3 4B 2C            [ 1] 1069 	push	#0x2c
      0004A5 CDr00rA8         [ 4] 1070 	call	_write_spi_buf
      0004A8 5B 04            [ 2] 1071 	addw	sp, #4
                                   1072 ;	joysticksend.c: 366: temp[0]=0x55;
      0004AA 1E 0C            [ 2] 1073 	ldw	x, (0x0c, sp)
      0004AC A6 55            [ 1] 1074 	ld	a, #0x55
      0004AE F7               [ 1] 1075 	ld	(x), a
                                   1076 ;	joysticksend.c: 367: temp[1]=0xC2;
      0004AF 1E 0A            [ 2] 1077 	ldw	x, (0x0a, sp)
      0004B1 A6 C2            [ 1] 1078 	ld	a, #0xc2
      0004B3 F7               [ 1] 1079 	ld	(x), a
                                   1080 ;	joysticksend.c: 368: temp[2]=0x09;
      0004B4 1E 08            [ 2] 1081 	ldw	x, (0x08, sp)
      0004B6 A6 09            [ 1] 1082 	ld	a, #0x09
      0004B8 F7               [ 1] 1083 	ld	(x), a
                                   1084 ;	joysticksend.c: 369: temp[3]=0xAC;  
      0004B9 1E 06            [ 2] 1085 	ldw	x, (0x06, sp)
      0004BB A6 AC            [ 1] 1086 	ld	a, #0xac
      0004BD F7               [ 1] 1087 	ld	(x), a
                                   1088 ;	joysticksend.c: 370: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      0004BE 1E 0C            [ 2] 1089 	ldw	x, (0x0c, sp)
      0004C0 4B 04            [ 1] 1090 	push	#0x04
      0004C2 89               [ 2] 1091 	pushw	x
      0004C3 4B 31            [ 1] 1092 	push	#0x31
      0004C5 CDr00rA8         [ 4] 1093 	call	_write_spi_buf
      0004C8 5B 04            [ 2] 1094 	addw	sp, #4
                                   1095 ;	joysticksend.c: 372: temp[0]=0x00;
      0004CA 1E 0C            [ 2] 1096 	ldw	x, (0x0c, sp)
      0004CC 7F               [ 1] 1097 	clr	(x)
                                   1098 ;	joysticksend.c: 373: temp[1]=0x14;
      0004CD 1E 0A            [ 2] 1099 	ldw	x, (0x0a, sp)
      0004CF A6 14            [ 1] 1100 	ld	a, #0x14
      0004D1 F7               [ 1] 1101 	ld	(x), a
                                   1102 ;	joysticksend.c: 374: temp[2]=0x08;   
      0004D2 1E 08            [ 2] 1103 	ldw	x, (0x08, sp)
      0004D4 A6 08            [ 1] 1104 	ld	a, #0x08
      0004D6 F7               [ 1] 1105 	ld	(x), a
                                   1106 ;	joysticksend.c: 375: temp[3]=0x29;
      0004D7 1E 06            [ 2] 1107 	ldw	x, (0x06, sp)
      0004D9 A6 29            [ 1] 1108 	ld	a, #0x29
      0004DB F7               [ 1] 1109 	ld	(x), a
                                   1110 ;	joysticksend.c: 376: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0004DC 1E 0C            [ 2] 1111 	ldw	x, (0x0c, sp)
      0004DE 4B 04            [ 1] 1112 	push	#0x04
      0004E0 89               [ 2] 1113 	pushw	x
      0004E1 4B 33            [ 1] 1114 	push	#0x33
      0004E3 CDr00rA8         [ 4] 1115 	call	_write_spi_buf
      0004E6 5B 04            [ 2] 1116 	addw	sp, #4
                                   1117 ;	joysticksend.c: 378: temp[0]=0x02;
      0004E8 1E 0C            [ 2] 1118 	ldw	x, (0x0c, sp)
      0004EA A6 02            [ 1] 1119 	ld	a, #0x02
      0004EC F7               [ 1] 1120 	ld	(x), a
                                   1121 ;	joysticksend.c: 379: temp[1]=0xC1;
      0004ED 1E 0A            [ 2] 1122 	ldw	x, (0x0a, sp)
      0004EF A6 C1            [ 1] 1123 	ld	a, #0xc1
      0004F1 F7               [ 1] 1124 	ld	(x), a
                                   1125 ;	joysticksend.c: 380: temp[2]=0xCB;  
      0004F2 1E 08            [ 2] 1126 	ldw	x, (0x08, sp)
      0004F4 A6 CB            [ 1] 1127 	ld	a, #0xcb
      0004F6 F7               [ 1] 1128 	ld	(x), a
                                   1129 ;	joysticksend.c: 381: temp[3]=0x1C;
      0004F7 1E 06            [ 2] 1130 	ldw	x, (0x06, sp)
      0004F9 A6 1C            [ 1] 1131 	ld	a, #0x1c
      0004FB F7               [ 1] 1132 	ld	(x), a
                                   1133 ;	joysticksend.c: 382: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0004FC 1E 0C            [ 2] 1134 	ldw	x, (0x0c, sp)
      0004FE 4B 04            [ 1] 1135 	push	#0x04
      000500 89               [ 2] 1136 	pushw	x
      000501 4B 3D            [ 1] 1137 	push	#0x3d
      000503 CDr00rA8         [ 4] 1138 	call	_write_spi_buf
      000506 5B 04            [ 2] 1139 	addw	sp, #4
                                   1140 ;	joysticksend.c: 384: temp[0]=0x97;
      000508 1E 0C            [ 2] 1141 	ldw	x, (0x0c, sp)
      00050A A6 97            [ 1] 1142 	ld	a, #0x97
      00050C F7               [ 1] 1143 	ld	(x), a
                                   1144 ;	joysticksend.c: 385: temp[1]=0x64;
      00050D 1E 0A            [ 2] 1145 	ldw	x, (0x0a, sp)
      00050F A6 64            [ 1] 1146 	ld	a, #0x64
      000511 F7               [ 1] 1147 	ld	(x), a
                                   1148 ;	joysticksend.c: 386: temp[2]=0x00;
      000512 1E 08            [ 2] 1149 	ldw	x, (0x08, sp)
      000514 7F               [ 1] 1150 	clr	(x)
                                   1151 ;	joysticksend.c: 387: temp[3]=0x01;
      000515 1E 06            [ 2] 1152 	ldw	x, (0x06, sp)
      000517 A6 01            [ 1] 1153 	ld	a, #0x01
      000519 F7               [ 1] 1154 	ld	(x), a
                                   1155 ;	joysticksend.c: 388: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      00051A 1E 0C            [ 2] 1156 	ldw	x, (0x0c, sp)
      00051C 4B 04            [ 1] 1157 	push	#0x04
      00051E 89               [ 2] 1158 	pushw	x
      00051F 4B 3E            [ 1] 1159 	push	#0x3e
      000521 CDr00rA8         [ 4] 1160 	call	_write_spi_buf
      000524 5B 04            [ 2] 1161 	addw	sp, #4
                                   1162 ;	joysticksend.c: 390: gtemp[0]=0x2A;
      000526 1E 14            [ 2] 1163 	ldw	x, (0x14, sp)
      000528 A6 2A            [ 1] 1164 	ld	a, #0x2a
      00052A F7               [ 1] 1165 	ld	(x), a
                                   1166 ;	joysticksend.c: 391: gtemp[1]=0x04;
      00052B 1E 12            [ 2] 1167 	ldw	x, (0x12, sp)
      00052D A6 04            [ 1] 1168 	ld	a, #0x04
      00052F F7               [ 1] 1169 	ld	(x), a
                                   1170 ;	joysticksend.c: 392: gtemp[2]=0x00;
      000530 1E 10            [ 2] 1171 	ldw	x, (0x10, sp)
      000532 7F               [ 1] 1172 	clr	(x)
                                   1173 ;	joysticksend.c: 393: gtemp[3]=0x7D;
      000533 1E 0E            [ 2] 1174 	ldw	x, (0x0e, sp)
      000535 A6 7D            [ 1] 1175 	ld	a, #0x7d
      000537 F7               [ 1] 1176 	ld	(x), a
                                   1177 ;	joysticksend.c: 394: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000538 1E 14            [ 2] 1178 	ldw	x, (0x14, sp)
      00053A 4B 04            [ 1] 1179 	push	#0x04
      00053C 89               [ 2] 1180 	pushw	x
      00053D 4B 3F            [ 1] 1181 	push	#0x3f
      00053F CDr00rA8         [ 4] 1182 	call	_write_spi_buf
      000542 5B 04            [ 2] 1183 	addw	sp, #4
                                   1184 ;	joysticksend.c: 396: rf_switch_bank(iBANK0);
      000544 4B 00            [ 1] 1185 	push	#0x00
      000546 CDr01rE8         [ 4] 1186 	call	_rf_switch_bank
      000549 84               [ 1] 1187 	pop	a
      00054A 5B 15            [ 2] 1188 	addw	sp, #21
      00054C 81               [ 4] 1189 	ret
                                   1190 ;	joysticksend.c: 399: void SE8R01_Init()  
                                   1191 ;	-----------------------------------------
                                   1192 ;	 function SE8R01_Init
                                   1193 ;	-----------------------------------------
      00054D                       1194 _SE8R01_Init:
      00054D 52 05            [ 2] 1195 	sub	sp, #5
                                   1196 ;	joysticksend.c: 402: SE8R01_Calibration();   
      00054F CDr02r05         [ 4] 1197 	call	_SE8R01_Calibration
                                   1198 ;	joysticksend.c: 403: SE8R01_Analog_Init();   
      000552 CDr03rD1         [ 4] 1199 	call	_SE8R01_Analog_Init
                                   1200 ;	joysticksend.c: 407: if (SE8R01_DR_2M==1)
      000555 CEu00u00         [ 2] 1201 	ldw	x, _SE8R01_DR_2M+0
      000558 A3 00 01         [ 2] 1202 	cpw	x, #0x0001
      00055B 26 07            [ 1] 1203 	jrne	00105$
                                   1204 ;	joysticksend.c: 408: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      00055D 96               [ 1] 1205 	ldw	x, sp
      00055E 5C               [ 2] 1206 	incw	x
      00055F A6 4F            [ 1] 1207 	ld	a, #0x4f
      000561 F7               [ 1] 1208 	ld	(x), a
      000562 20 14            [ 2] 1209 	jra	00106$
      000564                       1210 00105$:
                                   1211 ;	joysticksend.c: 409: else if  (SE8R01_DR_1M==1)
      000564 CEu00u02         [ 2] 1212 	ldw	x, _SE8R01_DR_1M+0
      000567 A3 00 01         [ 2] 1213 	cpw	x, #0x0001
      00056A 26 07            [ 1] 1214 	jrne	00102$
                                   1215 ;	joysticksend.c: 410: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      00056C 96               [ 1] 1216 	ldw	x, sp
      00056D 5C               [ 2] 1217 	incw	x
      00056E A6 47            [ 1] 1218 	ld	a, #0x47
      000570 F7               [ 1] 1219 	ld	(x), a
      000571 20 05            [ 2] 1220 	jra	00106$
      000573                       1221 00102$:
                                   1222 ;	joysticksend.c: 412: {temp[0]=0b01101111;  }     //500K,+5dbm
      000573 96               [ 1] 1223 	ldw	x, sp
      000574 5C               [ 2] 1224 	incw	x
      000575 A6 6F            [ 1] 1225 	ld	a, #0x6f
      000577 F7               [ 1] 1226 	ld	(x), a
      000578                       1227 00106$:
                                   1228 ;	joysticksend.c: 414: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000578 96               [ 1] 1229 	ldw	x, sp
      000579 5C               [ 2] 1230 	incw	x
      00057A 4B 01            [ 1] 1231 	push	#0x01
      00057C 89               [ 2] 1232 	pushw	x
      00057D 4B 26            [ 1] 1233 	push	#0x26
      00057F CDr00rA8         [ 4] 1234 	call	_write_spi_buf
      000582 5B 04            [ 2] 1235 	addw	sp, #4
                                   1236 ;	joysticksend.c: 416: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0x01);          //enable auto acc on pip 1
      000584 4B 01            [ 1] 1237 	push	#0x01
      000586 4B 21            [ 1] 1238 	push	#0x21
      000588 CDr00r2E         [ 4] 1239 	call	_write_spi_reg
      00058B 5B 02            [ 2] 1240 	addw	sp, #2
                                   1241 ;	joysticksend.c: 417: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0x01);      //enable pip 1
      00058D 4B 01            [ 1] 1242 	push	#0x01
      00058F 4B 22            [ 1] 1243 	push	#0x22
      000591 CDr00r2E         [ 4] 1244 	call	_write_spi_reg
      000594 5B 02            [ 2] 1245 	addw	sp, #2
                                   1246 ;	joysticksend.c: 418: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);        //4 byte adress
      000596 4B 02            [ 1] 1247 	push	#0x02
      000598 4B 23            [ 1] 1248 	push	#0x23
      00059A CDr00r2E         [ 4] 1249 	call	_write_spi_reg
      00059D 5B 02            [ 2] 1250 	addw	sp, #2
                                   1251 ;	joysticksend.c: 419: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_RETR, 0x08);        //lowest 4 bits 0-15 rt transmisston higest 4 bits 256-4096us Auto Retransmit Delay
      00059F 4B 08            [ 1] 1252 	push	#0x08
      0005A1 4B 24            [ 1] 1253 	push	#0x24
      0005A3 CDr00r2E         [ 4] 1254 	call	_write_spi_reg
      0005A6 5B 02            [ 2] 1255 	addw	sp, #2
                                   1256 ;	joysticksend.c: 420: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      0005A8 4B 28            [ 1] 1257 	push	#0x28
      0005AA 4B 25            [ 1] 1258 	push	#0x25
      0005AC CDr00r2E         [ 4] 1259 	call	_write_spi_reg
      0005AF 5B 02            [ 2] 1260 	addw	sp, #2
                                   1261 ;	joysticksend.c: 421: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0x01);          //pipe0 pipe1 enable dynamic payload length data
      0005B1 4B 01            [ 1] 1262 	push	#0x01
      0005B3 4B 3C            [ 1] 1263 	push	#0x3c
      0005B5 CDr00r2E         [ 4] 1264 	call	_write_spi_reg
      0005B8 5B 02            [ 2] 1265 	addw	sp, #2
                                   1266 ;	joysticksend.c: 422: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      0005BA 4B 07            [ 1] 1267 	push	#0x07
      0005BC 4B 3D            [ 1] 1268 	push	#0x3d
      0005BE CDr00r2E         [ 4] 1269 	call	_write_spi_reg
      0005C1 5B 02            [ 2] 1270 	addw	sp, #2
                                   1271 ;	joysticksend.c: 423: write_spi_reg(WRITE_REG + CONFIG, 0x3E);
      0005C3 4B 3E            [ 1] 1272 	push	#0x3e
      0005C5 4B 20            [ 1] 1273 	push	#0x20
      0005C7 CDr00r2E         [ 4] 1274 	call	_write_spi_reg
      0005CA 5B 02            [ 2] 1275 	addw	sp, #2
                                   1276 ;	joysticksend.c: 424: write_spi_buf(WRITE_REG + TX_ADDR, TX_ADDRESS, ADR_WIDTH);  //from tx
      0005CC AEr00r0E         [ 2] 1277 	ldw	x, #_TX_ADDRESS+0
      0005CF 90 93            [ 1] 1278 	ldw	y, x
      0005D1 89               [ 2] 1279 	pushw	x
      0005D2 4B 04            [ 1] 1280 	push	#0x04
      0005D4 90 89            [ 2] 1281 	pushw	y
      0005D6 4B 30            [ 1] 1282 	push	#0x30
      0005D8 CDr00rA8         [ 4] 1283 	call	_write_spi_buf
      0005DB 5B 04            [ 2] 1284 	addw	sp, #4
      0005DD 85               [ 2] 1285 	popw	x
                                   1286 ;	joysticksend.c: 426: write_spi_buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, ADR_WIDTH); // Use the same address on the RX device as the TX device write_spi_reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
      0005DE 4B 04            [ 1] 1287 	push	#0x04
      0005E0 89               [ 2] 1288 	pushw	x
      0005E1 4B 2A            [ 1] 1289 	push	#0x2a
      0005E3 CDr00rA8         [ 4] 1290 	call	_write_spi_buf
      0005E6 5B 04            [ 2] 1291 	addw	sp, #4
                                   1292 ;	joysticksend.c: 429: PC_ODR |= (1 << CE);
      0005E8 AE 50 0A         [ 2] 1293 	ldw	x, #0x500a
      0005EB F6               [ 1] 1294 	ld	a, (x)
      0005EC AA 10            [ 1] 1295 	or	a, #0x10
      0005EE F7               [ 1] 1296 	ld	(x), a
      0005EF 5B 05            [ 2] 1297 	addw	sp, #5
      0005F1 81               [ 4] 1298 	ret
                                   1299 ;	joysticksend.c: 435: int main () {
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function main
                                   1302 ;	-----------------------------------------
      0005F2                       1303 _main:
      0005F2 52 42            [ 2] 1304 	sub	sp, #66
                                   1305 ;	joysticksend.c: 440: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      0005F4 90 96            [ 1] 1306 	ldw	y, sp
      0005F6 72 A9 00 28      [ 2] 1307 	addw	y, #40
      0005FA A6 D2            [ 1] 1308 	ld	a, #0xd2
      0005FC 90 F7            [ 1] 1309 	ld	(y), a
      0005FE 93               [ 1] 1310 	ldw	x, y
      0005FF 5C               [ 2] 1311 	incw	x
      000600 A6 F0            [ 1] 1312 	ld	a, #0xf0
      000602 F7               [ 1] 1313 	ld	(x), a
      000603 93               [ 1] 1314 	ldw	x, y
      000604 5C               [ 2] 1315 	incw	x
      000605 5C               [ 2] 1316 	incw	x
      000606 A6 F0            [ 1] 1317 	ld	a, #0xf0
      000608 F7               [ 1] 1318 	ld	(x), a
      000609 93               [ 1] 1319 	ldw	x, y
      00060A A6 F0            [ 1] 1320 	ld	a, #0xf0
      00060C E7 03            [ 1] 1321 	ld	(0x0003, x), a
      00060E 93               [ 1] 1322 	ldw	x, y
      00060F A6 F0            [ 1] 1323 	ld	a, #0xf0
      000611 E7 04            [ 1] 1324 	ld	(0x0004, x), a
                                   1325 ;	joysticksend.c: 441: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      000613 90 96            [ 1] 1326 	ldw	y, sp
      000615 72 A9 00 23      [ 2] 1327 	addw	y, #35
      000619 A6 E1            [ 1] 1328 	ld	a, #0xe1
      00061B 90 F7            [ 1] 1329 	ld	(y), a
      00061D 93               [ 1] 1330 	ldw	x, y
      00061E 5C               [ 2] 1331 	incw	x
      00061F A6 F0            [ 1] 1332 	ld	a, #0xf0
      000621 F7               [ 1] 1333 	ld	(x), a
      000622 93               [ 1] 1334 	ldw	x, y
      000623 5C               [ 2] 1335 	incw	x
      000624 5C               [ 2] 1336 	incw	x
      000625 A6 F0            [ 1] 1337 	ld	a, #0xf0
      000627 F7               [ 1] 1338 	ld	(x), a
      000628 93               [ 1] 1339 	ldw	x, y
      000629 A6 F0            [ 1] 1340 	ld	a, #0xf0
      00062B E7 03            [ 1] 1341 	ld	(0x0003, x), a
      00062D 93               [ 1] 1342 	ldw	x, y
      00062E 1C 00 04         [ 2] 1343 	addw	x, #0x0004
      000631 A6 F0            [ 1] 1344 	ld	a, #0xf0
      000633 F7               [ 1] 1345 	ld	(x), a
                                   1346 ;	joysticksend.c: 444: InitializeSystemClock();
      000634 CDr01r44         [ 4] 1347 	call	_InitializeSystemClock
                                   1348 ;	joysticksend.c: 451: PD_DDR |= (1 << 2) ; // output mode
      000637 AE 50 11         [ 2] 1349 	ldw	x, #0x5011
      00063A F6               [ 1] 1350 	ld	a, (x)
      00063B AA 04            [ 1] 1351 	or	a, #0x04
      00063D F7               [ 1] 1352 	ld	(x), a
                                   1353 ;	joysticksend.c: 452: PD_CR1 |= (1 << 2) ; // push-pull
      00063E AE 50 12         [ 2] 1354 	ldw	x, #0x5012
      000641 F6               [ 1] 1355 	ld	a, (x)
      000642 AA 04            [ 1] 1356 	or	a, #0x04
      000644 F7               [ 1] 1357 	ld	(x), a
                                   1358 ;	joysticksend.c: 454: PD_ODR &= ~(1 << 2);
      000645 AE 50 0F         [ 2] 1359 	ldw	x, #0x500f
      000648 F6               [ 1] 1360 	ld	a, (x)
      000649 A4 FB            [ 1] 1361 	and	a, #0xfb
      00064B F7               [ 1] 1362 	ld	(x), a
                                   1363 ;	joysticksend.c: 459: PD_DDR &= ~(1<<4);
      00064C AE 50 11         [ 2] 1364 	ldw	x, #0x5011
      00064F F6               [ 1] 1365 	ld	a, (x)
      000650 A4 EF            [ 1] 1366 	and	a, #0xef
      000652 F7               [ 1] 1367 	ld	(x), a
                                   1368 ;	joysticksend.c: 460: PD_CR1 |= (1<<4);
      000653 AE 50 12         [ 2] 1369 	ldw	x, #0x5012
      000656 F6               [ 1] 1370 	ld	a, (x)
      000657 AA 10            [ 1] 1371 	or	a, #0x10
      000659 F7               [ 1] 1372 	ld	(x), a
                                   1373 ;	joysticksend.c: 469: InitializeSPI ();
      00065A CDr01r1C         [ 4] 1374 	call	_InitializeSPI
                                   1375 ;	joysticksend.c: 472: memset (tx_payload, 0, sizeof(tx_payload));
      00065D 96               [ 1] 1376 	ldw	x, sp
      00065E 5C               [ 2] 1377 	incw	x
      00065F 5C               [ 2] 1378 	incw	x
      000660 1F 3B            [ 2] 1379 	ldw	(0x3b, sp), x
      000662 16 3B            [ 2] 1380 	ldw	y, (0x3b, sp)
      000664 4B 21            [ 1] 1381 	push	#0x21
      000666 4B 00            [ 1] 1382 	push	#0x00
      000668 5F               [ 1] 1383 	clrw	x
      000669 89               [ 2] 1384 	pushw	x
      00066A 90 89            [ 2] 1385 	pushw	y
      00066C CDr00r00         [ 4] 1386 	call	_memset
      00066F 5B 06            [ 2] 1387 	addw	sp, #6
                                   1388 ;	joysticksend.c: 475: init_io();                        // Initialize IO port
      000671 CDr01rD9         [ 4] 1389 	call	_init_io
                                   1390 ;	joysticksend.c: 476: write_spi_reg(FLUSH_TX,0); // transmit -- send data 
      000674 4B 00            [ 1] 1391 	push	#0x00
      000676 4B E1            [ 1] 1392 	push	#0xe1
      000678 CDr00r2E         [ 4] 1393 	call	_write_spi_reg
      00067B 5B 02            [ 2] 1394 	addw	sp, #2
                                   1395 ;	joysticksend.c: 477: readstatus = read_spi_reg(CONFIG);
      00067D 4B 00            [ 1] 1396 	push	#0x00
      00067F CDr00r6A         [ 4] 1397 	call	_read_spi_reg
      000682 84               [ 1] 1398 	pop	a
                                   1399 ;	joysticksend.c: 478: readstatus = read_spi_reg(STATUS);
      000683 4B 07            [ 1] 1400 	push	#0x07
      000685 CDr00r6A         [ 4] 1401 	call	_read_spi_reg
      000688 84               [ 1] 1402 	pop	a
                                   1403 ;	joysticksend.c: 480: SE8R01_Init();
      000689 CDr05r4D         [ 4] 1404 	call	_SE8R01_Init
                                   1405 ;	joysticksend.c: 484: while (1) {
      00068C                       1406 00110$:
                                   1407 ;	joysticksend.c: 488: xaxis=0;
      00068C 5F               [ 1] 1408 	clrw	x
      00068D 1F 39            [ 2] 1409 	ldw	(0x39, sp), x
                                   1410 ;	joysticksend.c: 489: yaxis=0;
      00068F 5F               [ 1] 1411 	clrw	x
      000690 1F 3F            [ 2] 1412 	ldw	(0x3f, sp), x
                                   1413 ;	joysticksend.c: 490: joyswitch = PD_IDR & (1<<4);
      000692 AE 50 10         [ 2] 1414 	ldw	x, #0x5010
      000695 F6               [ 1] 1415 	ld	a, (x)
      000696 A4 10            [ 1] 1416 	and	a, #0x10
      000698 6B 01            [ 1] 1417 	ld	(0x01, sp), a
                                   1418 ;	joysticksend.c: 492: if (joyswitch == 1) PD_ODR &= ~(1 << 2); //switch led on port PD2 on
      00069A 7B 01            [ 1] 1419 	ld	a, (0x01, sp)
      00069C A1 01            [ 1] 1420 	cp	a, #0x01
      00069E 26 07            [ 1] 1421 	jrne	00102$
      0006A0 AE 50 0F         [ 2] 1422 	ldw	x, #0x500f
      0006A3 F6               [ 1] 1423 	ld	a, (x)
      0006A4 A4 FB            [ 1] 1424 	and	a, #0xfb
      0006A6 F7               [ 1] 1425 	ld	(x), a
      0006A7                       1426 00102$:
                                   1427 ;	joysticksend.c: 494: ADC_CSR |= ((0x0F)&5); // select channel = 5 = PD5
      0006A7 AE 54 00         [ 2] 1428 	ldw	x, #0x5400
      0006AA F6               [ 1] 1429 	ld	a, (x)
      0006AB AA 05            [ 1] 1430 	or	a, #0x05
      0006AD F7               [ 1] 1431 	ld	(x), a
                                   1432 ;	joysticksend.c: 495: ADC_CR2 |= ADC_ALIGN; // Right Aligned Data
      0006AE AE 54 02         [ 2] 1433 	ldw	x, #0x5402
      0006B1 F6               [ 1] 1434 	ld	a, (x)
      0006B2 AA 08            [ 1] 1435 	or	a, #0x08
      0006B4 F7               [ 1] 1436 	ld	(x), a
                                   1437 ;	joysticksend.c: 496: ADC_CR1 |= ADC_ADON; // ADC ON
      0006B5 72 10 54 01      [ 1] 1438 	bset	0x5401, #0
                                   1439 ;	joysticksend.c: 497: ADC_CR1 |= ADC_ADON; // start conversion 
      0006B9 72 10 54 01      [ 1] 1440 	bset	0x5401, #0
                                   1441 ;	joysticksend.c: 498: while(((ADC_CSR)&(1<<7))== 0); // Wait till EOC
      0006BD                       1442 00103$:
      0006BD AE 54 00         [ 2] 1443 	ldw	x, #0x5400
      0006C0 F6               [ 1] 1444 	ld	a, (x)
      0006C1 48               [ 1] 1445 	sll	a
      0006C2 24 F9            [ 1] 1446 	jrnc	00103$
                                   1447 ;	joysticksend.c: 500: xaxis |= (unsigned int)ADC_DRL;
      0006C4 AE 54 05         [ 2] 1448 	ldw	x, #0x5405
      0006C7 F6               [ 1] 1449 	ld	a, (x)
      0006C8 02               [ 1] 1450 	rlwa	x
      0006C9 4F               [ 1] 1451 	clr	a
      0006CA 01               [ 1] 1452 	rrwa	x
      0006CB 16 39            [ 2] 1453 	ldw	y, (0x39, sp)
      0006CD 17 3D            [ 2] 1454 	ldw	(0x3d, sp), y
      0006CF 1A 3E            [ 1] 1455 	or	a, (0x3e, sp)
      0006D1 90 97            [ 1] 1456 	ld	yl, a
      0006D3 9E               [ 1] 1457 	ld	a, xh
      0006D4 1A 3D            [ 1] 1458 	or	a, (0x3d, sp)
      0006D6 90 95            [ 1] 1459 	ld	yh, a
                                   1460 ;	joysticksend.c: 501: xaxis |= (unsigned int)ADC_DRH<<8;
      0006D8 AE 54 04         [ 2] 1461 	ldw	x, #0x5404
      0006DB F6               [ 1] 1462 	ld	a, (x)
      0006DC 5F               [ 1] 1463 	clrw	x
      0006DD 97               [ 1] 1464 	ld	xl, a
      0006DE 58               [ 2] 1465 	sllw	x
      0006DF 58               [ 2] 1466 	sllw	x
      0006E0 58               [ 2] 1467 	sllw	x
      0006E1 58               [ 2] 1468 	sllw	x
      0006E2 58               [ 2] 1469 	sllw	x
      0006E3 58               [ 2] 1470 	sllw	x
      0006E4 58               [ 2] 1471 	sllw	x
      0006E5 58               [ 2] 1472 	sllw	x
      0006E6 17 37            [ 2] 1473 	ldw	(0x37, sp), y
      0006E8 9F               [ 1] 1474 	ld	a, xl
      0006E9 1A 38            [ 1] 1475 	or	a, (0x38, sp)
      0006EB 90 97            [ 1] 1476 	ld	yl, a
      0006ED 9E               [ 1] 1477 	ld	a, xh
      0006EE 1A 37            [ 1] 1478 	or	a, (0x37, sp)
      0006F0 90 95            [ 1] 1479 	ld	yh, a
                                   1480 ;	joysticksend.c: 503: ADC_CR1 &= ~(1<<0); // ADC Stop Conversion
      0006F2 AE 54 01         [ 2] 1481 	ldw	x, #0x5401
      0006F5 F6               [ 1] 1482 	ld	a, (x)
      0006F6 A4 FE            [ 1] 1483 	and	a, #0xfe
      0006F8 F7               [ 1] 1484 	ld	(x), a
                                   1485 ;	joysticksend.c: 504: xaxis &= 0x03ff; // 0 bits resolution so above 0x0400 is nothing
      0006F9 90 9E            [ 1] 1486 	ld	a, yh
      0006FB A4 03            [ 1] 1487 	and	a, #0x03
      0006FD 90 95            [ 1] 1488 	ld	yh, a
      0006FF 17 35            [ 2] 1489 	ldw	(0x35, sp), y
                                   1490 ;	joysticksend.c: 506: ADC_CSR |= ((0x0F)&6); // select channel = 6 = PD6
      000701 AE 54 00         [ 2] 1491 	ldw	x, #0x5400
      000704 F6               [ 1] 1492 	ld	a, (x)
      000705 AA 06            [ 1] 1493 	or	a, #0x06
      000707 F7               [ 1] 1494 	ld	(x), a
                                   1495 ;	joysticksend.c: 507: ADC_CR2 |= ADC_ALIGN; // Right Aligned Data
      000708 AE 54 02         [ 2] 1496 	ldw	x, #0x5402
      00070B F6               [ 1] 1497 	ld	a, (x)
      00070C AA 08            [ 1] 1498 	or	a, #0x08
      00070E F7               [ 1] 1499 	ld	(x), a
                                   1500 ;	joysticksend.c: 508: ADC_CR1 |= ADC_ADON; // ADC ON
      00070F 72 10 54 01      [ 1] 1501 	bset	0x5401, #0
                                   1502 ;	joysticksend.c: 509: ADC_CR1 |= ADC_ADON; // start conversion 
      000713 72 10 54 01      [ 1] 1503 	bset	0x5401, #0
                                   1504 ;	joysticksend.c: 510: while(((ADC_CSR)&(1<<7))== 0); // Wait till EOC
      000717                       1505 00106$:
      000717 AE 54 00         [ 2] 1506 	ldw	x, #0x5400
      00071A F6               [ 1] 1507 	ld	a, (x)
      00071B 48               [ 1] 1508 	sll	a
      00071C 24 F9            [ 1] 1509 	jrnc	00106$
                                   1510 ;	joysticksend.c: 512: yaxis |= (unsigned int)ADC_DRL;
      00071E AE 54 05         [ 2] 1511 	ldw	x, #0x5405
      000721 F6               [ 1] 1512 	ld	a, (x)
      000722 02               [ 1] 1513 	rlwa	x
      000723 4F               [ 1] 1514 	clr	a
      000724 01               [ 1] 1515 	rrwa	x
      000725 16 3F            [ 2] 1516 	ldw	y, (0x3f, sp)
      000727 17 33            [ 2] 1517 	ldw	(0x33, sp), y
      000729 1A 34            [ 1] 1518 	or	a, (0x34, sp)
      00072B 90 97            [ 1] 1519 	ld	yl, a
      00072D 9E               [ 1] 1520 	ld	a, xh
      00072E 1A 33            [ 1] 1521 	or	a, (0x33, sp)
      000730 90 95            [ 1] 1522 	ld	yh, a
                                   1523 ;	joysticksend.c: 513: yaxis |= (unsigned int)ADC_DRH<<8;
      000732 AE 54 04         [ 2] 1524 	ldw	x, #0x5404
      000735 F6               [ 1] 1525 	ld	a, (x)
      000736 5F               [ 1] 1526 	clrw	x
      000737 97               [ 1] 1527 	ld	xl, a
      000738 58               [ 2] 1528 	sllw	x
      000739 58               [ 2] 1529 	sllw	x
      00073A 58               [ 2] 1530 	sllw	x
      00073B 58               [ 2] 1531 	sllw	x
      00073C 58               [ 2] 1532 	sllw	x
      00073D 58               [ 2] 1533 	sllw	x
      00073E 58               [ 2] 1534 	sllw	x
      00073F 58               [ 2] 1535 	sllw	x
      000740 17 31            [ 2] 1536 	ldw	(0x31, sp), y
      000742 9F               [ 1] 1537 	ld	a, xl
      000743 1A 32            [ 1] 1538 	or	a, (0x32, sp)
      000745 90 97            [ 1] 1539 	ld	yl, a
      000747 9E               [ 1] 1540 	ld	a, xh
      000748 1A 31            [ 1] 1541 	or	a, (0x31, sp)
      00074A 90 95            [ 1] 1542 	ld	yh, a
                                   1543 ;	joysticksend.c: 515: ADC_CR1 &= ~(1<<0); // ADC Stop Conversion
      00074C AE 54 01         [ 2] 1544 	ldw	x, #0x5401
      00074F F6               [ 1] 1545 	ld	a, (x)
      000750 A4 FE            [ 1] 1546 	and	a, #0xfe
      000752 F7               [ 1] 1547 	ld	(x), a
                                   1548 ;	joysticksend.c: 516: yaxis &= 0x03ff; // 0 bits resolution so above 0x0400 is nothing
      000753 90 9E            [ 1] 1549 	ld	a, yh
      000755 A4 03            [ 1] 1550 	and	a, #0x03
      000757 90 95            [ 1] 1551 	ld	yh, a
                                   1552 ;	joysticksend.c: 521: tx_payload[0] = 0xac; //first two is unique ID for this emitter 
      000759 1E 3B            [ 2] 1553 	ldw	x, (0x3b, sp)
      00075B A6 AC            [ 1] 1554 	ld	a, #0xac
      00075D F7               [ 1] 1555 	ld	(x), a
                                   1556 ;	joysticksend.c: 522: tx_payload[1] = 0xcc;
      00075E 1E 3B            [ 2] 1557 	ldw	x, (0x3b, sp)
      000760 5C               [ 2] 1558 	incw	x
      000761 A6 CC            [ 1] 1559 	ld	a, #0xcc
      000763 F7               [ 1] 1560 	ld	(x), a
                                   1561 ;	joysticksend.c: 523: tx_payload[2] = xaxis>>8;
      000764 1E 3B            [ 2] 1562 	ldw	x, (0x3b, sp)
      000766 5C               [ 2] 1563 	incw	x
      000767 5C               [ 2] 1564 	incw	x
      000768 1F 2F            [ 2] 1565 	ldw	(0x2f, sp), x
      00076A 1E 35            [ 2] 1566 	ldw	x, (0x35, sp)
      00076C 57               [ 2] 1567 	sraw	x
      00076D 57               [ 2] 1568 	sraw	x
      00076E 57               [ 2] 1569 	sraw	x
      00076F 57               [ 2] 1570 	sraw	x
      000770 57               [ 2] 1571 	sraw	x
      000771 57               [ 2] 1572 	sraw	x
      000772 57               [ 2] 1573 	sraw	x
      000773 57               [ 2] 1574 	sraw	x
      000774 9F               [ 1] 1575 	ld	a, xl
      000775 1E 2F            [ 2] 1576 	ldw	x, (0x2f, sp)
      000777 F7               [ 1] 1577 	ld	(x), a
                                   1578 ;	joysticksend.c: 524: tx_payload[3] = xaxis & 0x00ff; 
      000778 1E 3B            [ 2] 1579 	ldw	x, (0x3b, sp)
      00077A 1C 00 03         [ 2] 1580 	addw	x, #0x0003
      00077D 7B 36            [ 1] 1581 	ld	a, (0x36, sp)
      00077F 88               [ 1] 1582 	push	a
      000780 0F 2E            [ 1] 1583 	clr	(0x2e, sp)
      000782 84               [ 1] 1584 	pop	a
      000783 F7               [ 1] 1585 	ld	(x), a
                                   1586 ;	joysticksend.c: 525: tx_payload[4] = yaxis>>8;
      000784 1E 3B            [ 2] 1587 	ldw	x, (0x3b, sp)
      000786 1C 00 04         [ 2] 1588 	addw	x, #0x0004
      000789 1F 41            [ 2] 1589 	ldw	(0x41, sp), x
      00078B 93               [ 1] 1590 	ldw	x, y
      00078C 57               [ 2] 1591 	sraw	x
      00078D 57               [ 2] 1592 	sraw	x
      00078E 57               [ 2] 1593 	sraw	x
      00078F 57               [ 2] 1594 	sraw	x
      000790 57               [ 2] 1595 	sraw	x
      000791 57               [ 2] 1596 	sraw	x
      000792 57               [ 2] 1597 	sraw	x
      000793 57               [ 2] 1598 	sraw	x
      000794 9F               [ 1] 1599 	ld	a, xl
      000795 1E 41            [ 2] 1600 	ldw	x, (0x41, sp)
      000797 F7               [ 1] 1601 	ld	(x), a
                                   1602 ;	joysticksend.c: 526: tx_payload[5] = yaxis & 0x00ff; 
      000798 1E 3B            [ 2] 1603 	ldw	x, (0x3b, sp)
      00079A 1C 00 05         [ 2] 1604 	addw	x, #0x0005
      00079D 4F               [ 1] 1605 	clr	a
      00079E 90 9F            [ 1] 1606 	ld	a, yl
      0007A0 F7               [ 1] 1607 	ld	(x), a
                                   1608 ;	joysticksend.c: 527: tx_payload[6] = joyswitch; 
      0007A1 1E 3B            [ 2] 1609 	ldw	x, (0x3b, sp)
      0007A3 7B 01            [ 1] 1610 	ld	a, (0x01, sp)
      0007A5 E7 06            [ 1] 1611 	ld	(0x0006, x), a
                                   1612 ;	joysticksend.c: 528: write_spi_buf(iRF_CMD_WR_TX_PLOAD, tx_payload, 7);
      0007A7 1E 3B            [ 2] 1613 	ldw	x, (0x3b, sp)
      0007A9 4B 07            [ 1] 1614 	push	#0x07
      0007AB 89               [ 2] 1615 	pushw	x
      0007AC 4B A0            [ 1] 1616 	push	#0xa0
      0007AE CDr00rA8         [ 4] 1617 	call	_write_spi_buf
      0007B1 5B 04            [ 2] 1618 	addw	sp, #4
                                   1619 ;	joysticksend.c: 529: write_spi_reg(WRITE_REG+STATUS, 0xff);
      0007B3 4B FF            [ 1] 1620 	push	#0xff
      0007B5 4B 27            [ 1] 1621 	push	#0x27
      0007B7 CDr00r2E         [ 4] 1622 	call	_write_spi_reg
      0007BA 5B 02            [ 2] 1623 	addw	sp, #2
                                   1624 ;	joysticksend.c: 536: delay(4);
      0007BC 4B 04            [ 1] 1625 	push	#0x04
      0007BE 4B 00            [ 1] 1626 	push	#0x00
      0007C0 CDr01r8E         [ 4] 1627 	call	_delay
      0007C3 5B 02            [ 2] 1628 	addw	sp, #2
                                   1629 ;	joysticksend.c: 537: PD_ODR &= ~(1 << 2); //switch led on pd2 off
      0007C5 AE 50 0F         [ 2] 1630 	ldw	x, #0x500f
      0007C8 F6               [ 1] 1631 	ld	a, (x)
      0007C9 A4 FB            [ 1] 1632 	and	a, #0xfb
      0007CB F7               [ 1] 1633 	ld	(x), a
      0007CC CCr06r8C         [ 2] 1634 	jp	00110$
      0007CF 5B 42            [ 2] 1635 	addw	sp, #66
      0007D1 81               [ 4] 1636 	ret
                                   1637 	.area CODE
                                   1638 	.area INITIALIZER
      000000                       1639 __xinit__SE8R01_DR_2M:
      000000 00 00                 1640 	.dw #0x0000
      000002                       1641 __xinit__SE8R01_DR_1M:
      000002 00 00                 1642 	.dw #0x0000
      000004                       1643 __xinit__SE8R01_DR_500K:
      000004 00 01                 1644 	.dw #0x0001
      000006                       1645 __xinit__pload_width_now:
      000006 00 00                 1646 	.dw #0x0000
      000008                       1647 __xinit__newdata:
      000008 00 00                 1648 	.dw #0x0000
      00000A                       1649 __xinit__signal_lv:
      00000A 00                    1650 	.db #0x00	;  0
      00000B                       1651 __xinit__pip:
      00000B 00 00                 1652 	.dw #0x0000
      00000D                       1653 __xinit__status:
      00000D 00                    1654 	.db #0x00	; 0
      00000E                       1655 __xinit__TX_ADDRESS:
      00000E B3                    1656 	.db #0xB3	; 179
      00000F 43                    1657 	.db #0x43	; 67	'C'
      000010 10                    1658 	.db #0x10	; 16
      000011 10                    1659 	.db #0x10	; 16
      000012                       1660 __xinit__ADDRESS2:
      000012 B1                    1661 	.db #0xB1	; 177
      000013                       1662 __xinit__ADDRESS3:
      000013 B2                    1663 	.db #0xB2	; 178
      000014                       1664 __xinit__ADDRESS4:
      000014 B3                    1665 	.db #0xB3	; 179
      000015                       1666 __xinit__ADDRESS5:
      000015 B4                    1667 	.db #0xB4	; 180
      000016                       1668 __xinit__ADDRESS1:
      000016 B0                    1669 	.db #0xB0	; 176
      000017 43                    1670 	.db #0x43	; 67	'C'
      000018 10                    1671 	.db #0x10	; 16
      000019 10                    1672 	.db #0x10	; 16
      00001A                       1673 __xinit__ADDRESS0:
      00001A 34                    1674 	.db #0x34	; 52	'4'
      00001B 43                    1675 	.db #0x43	; 67	'C'
      00001C 10                    1676 	.db #0x10	; 16
      00001D 10                    1677 	.db #0x10	; 16
      00001E                       1678 __xinit__rx_buf:
      00001E 00                    1679 	.db #0x00	; 0
      00001F 00                    1680 	.db 0x00
      000020 00                    1681 	.db 0x00
      000021 00                    1682 	.db 0x00
      000022 00                    1683 	.db 0x00
      000023 00                    1684 	.db 0x00
      000024 00                    1685 	.db 0x00
      000025 00                    1686 	.db 0x00
      000026 00                    1687 	.db 0x00
      000027 00                    1688 	.db 0x00
      000028 00                    1689 	.db 0x00
      000029 00                    1690 	.db 0x00
      00002A 00                    1691 	.db 0x00
      00002B 00                    1692 	.db 0x00
      00002C 00                    1693 	.db 0x00
      00002D 00                    1694 	.db 0x00
      00002E 00                    1695 	.db 0x00
      00002F 00                    1696 	.db 0x00
      000030 00                    1697 	.db 0x00
      000031 00                    1698 	.db 0x00
      000032 00                    1699 	.db 0x00
      000033 00                    1700 	.db 0x00
      000034 00                    1701 	.db 0x00
      000035 00                    1702 	.db 0x00
      000036 00                    1703 	.db 0x00
      000037 00                    1704 	.db 0x00
      000038 00                    1705 	.db 0x00
      000039 00                    1706 	.db 0x00
      00003A 00                    1707 	.db 0x00
      00003B 00                    1708 	.db 0x00
      00003C 00                    1709 	.db 0x00
      00003D 00                    1710 	.db 0x00
      00003E                       1711 __xinit__tx_buf:
      00003E 00                    1712 	.db #0x00	; 0
      00003F 00                    1713 	.db 0x00
      000040 00                    1714 	.db 0x00
      000041 00                    1715 	.db 0x00
      000042 00                    1716 	.db 0x00
      000043 00                    1717 	.db 0x00
      000044 00                    1718 	.db 0x00
      000045 00                    1719 	.db 0x00
      000046 00                    1720 	.db 0x00
      000047 00                    1721 	.db 0x00
      000048 00                    1722 	.db 0x00
      000049 00                    1723 	.db 0x00
      00004A 00                    1724 	.db 0x00
      00004B 00                    1725 	.db 0x00
      00004C 00                    1726 	.db 0x00
      00004D 00                    1727 	.db 0x00
      00004E 00                    1728 	.db 0x00
      00004F 00                    1729 	.db 0x00
      000050 00                    1730 	.db 0x00
      000051 00                    1731 	.db 0x00
      000052 00                    1732 	.db 0x00
      000053 00                    1733 	.db 0x00
      000054 00                    1734 	.db 0x00
      000055 00                    1735 	.db 0x00
      000056 00                    1736 	.db 0x00
      000057 00                    1737 	.db 0x00
      000058 00                    1738 	.db 0x00
      000059 00                    1739 	.db 0x00
      00005A 00                    1740 	.db 0x00
      00005B 00                    1741 	.db 0x00
      00005C 00                    1742 	.db 0x00
      00005D 00                    1743 	.db 0x00
                                   1744 	.area CABS (ABS)
