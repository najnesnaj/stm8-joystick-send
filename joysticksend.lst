                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Jul 11 2014) (Linux)
                                      4 ; This file was generated Thu Feb  8 11:44:52 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module joysticksend
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _SE8R01_Init
                                     14 	.globl _SE8R01_Analog_Init
                                     15 	.globl _SE8R01_Calibration
                                     16 	.globl _rf_switch_bank
                                     17 	.globl _init_io
                                     18 	.globl _InitializeUART
                                     19 	.globl _print_UCHAR_hex
                                     20 	.globl _UARTPrintF
                                     21 	.globl _delay
                                     22 	.globl _InitializeSystemClock
                                     23 	.globl _InitializeSPI
                                     24 	.globl _read_spi_buf
                                     25 	.globl _write_spi_buf
                                     26 	.globl _read_spi_reg
                                     27 	.globl _write_spi_reg
                                     28 	.globl _write_spi
                                     29 	.globl _delayTenMicro
                                     30 	.globl _memset
                                     31 	.globl _tx_buf
                                     32 	.globl _rx_buf
                                     33 	.globl _ADDRESS0
                                     34 	.globl _ADDRESS1
                                     35 	.globl _ADDRESS5
                                     36 	.globl _ADDRESS4
                                     37 	.globl _ADDRESS3
                                     38 	.globl _ADDRESS2
                                     39 	.globl _TX_ADDRESS
                                     40 	.globl _status
                                     41 	.globl _pip
                                     42 	.globl _signal_lv
                                     43 	.globl _newdata
                                     44 	.globl _pload_width_now
                                     45 	.globl _SE8R01_DR_500K
                                     46 	.globl _SE8R01_DR_1M
                                     47 	.globl _SE8R01_DR_2M
                                     48 	.globl _myData_pip4
                                     49 	.globl _myData_pip5
                                     50 	.globl _gtemp
                                     51 ;--------------------------------------------------------
                                     52 ; ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DATA
      000000                         55 _gtemp::
      000000                         56 	.ds 5
      000005                         57 _myData_pip5::
      000005                         58 	.ds 5
      00000A                         59 _myData_pip4::
      00000A                         60 	.ds 5
                                     61 ;--------------------------------------------------------
                                     62 ; ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area INITIALIZED
      000000                         65 _SE8R01_DR_2M::
      000000                         66 	.ds 2
      000002                         67 _SE8R01_DR_1M::
      000002                         68 	.ds 2
      000004                         69 _SE8R01_DR_500K::
      000004                         70 	.ds 2
      000006                         71 _pload_width_now::
      000006                         72 	.ds 2
      000008                         73 _newdata::
      000008                         74 	.ds 2
      00000A                         75 _signal_lv::
      00000A                         76 	.ds 1
      00000B                         77 _pip::
      00000B                         78 	.ds 2
      00000D                         79 _status::
      00000D                         80 	.ds 1
      00000E                         81 _TX_ADDRESS::
      00000E                         82 	.ds 4
      000012                         83 _ADDRESS2::
      000012                         84 	.ds 1
      000013                         85 _ADDRESS3::
      000013                         86 	.ds 1
      000014                         87 _ADDRESS4::
      000014                         88 	.ds 1
      000015                         89 _ADDRESS5::
      000015                         90 	.ds 1
      000016                         91 _ADDRESS1::
      000016                         92 	.ds 4
      00001A                         93 _ADDRESS0::
      00001A                         94 	.ds 4
      00001E                         95 _rx_buf::
      00001E                         96 	.ds 32
      00003E                         97 _tx_buf::
      00003E                         98 	.ds 32
                                     99 ;--------------------------------------------------------
                                    100 ; Stack segment in internal ram 
                                    101 ;--------------------------------------------------------
                                    102 	.area	SSEG
      000000                        103 __start__stack:
      000000                        104 	.ds	1
                                    105 
                                    106 ;--------------------------------------------------------
                                    107 ; absolute external ram data
                                    108 ;--------------------------------------------------------
                                    109 	.area DABS (ABS)
                                    110 ;--------------------------------------------------------
                                    111 ; interrupt vector 
                                    112 ;--------------------------------------------------------
                                    113 	.area HOME
      000000                        114 __interrupt_vect:
      000000 82v00u00u00            115 	int s_GSINIT ;reset
      000004 82 00 00 00            116 	int 0x0000 ;trap
      000008 82 00 00 00            117 	int 0x0000 ;int0
      00000C 82 00 00 00            118 	int 0x0000 ;int1
      000010 82 00 00 00            119 	int 0x0000 ;int2
      000014 82 00 00 00            120 	int 0x0000 ;int3
      000018 82 00 00 00            121 	int 0x0000 ;int4
      00001C 82 00 00 00            122 	int 0x0000 ;int5
      000020 82 00 00 00            123 	int 0x0000 ;int6
      000024 82 00 00 00            124 	int 0x0000 ;int7
      000028 82 00 00 00            125 	int 0x0000 ;int8
      00002C 82 00 00 00            126 	int 0x0000 ;int9
      000030 82 00 00 00            127 	int 0x0000 ;int10
      000034 82 00 00 00            128 	int 0x0000 ;int11
      000038 82 00 00 00            129 	int 0x0000 ;int12
      00003C 82 00 00 00            130 	int 0x0000 ;int13
      000040 82 00 00 00            131 	int 0x0000 ;int14
      000044 82 00 00 00            132 	int 0x0000 ;int15
      000048 82 00 00 00            133 	int 0x0000 ;int16
      00004C 82 00 00 00            134 	int 0x0000 ;int17
      000050 82 00 00 00            135 	int 0x0000 ;int18
      000054 82 00 00 00            136 	int 0x0000 ;int19
      000058 82 00 00 00            137 	int 0x0000 ;int20
      00005C 82 00 00 00            138 	int 0x0000 ;int21
      000060 82 00 00 00            139 	int 0x0000 ;int22
      000064 82 00 00 00            140 	int 0x0000 ;int23
      000068 82 00 00 00            141 	int 0x0000 ;int24
      00006C 82 00 00 00            142 	int 0x0000 ;int25
      000070 82 00 00 00            143 	int 0x0000 ;int26
      000074 82 00 00 00            144 	int 0x0000 ;int27
      000078 82 00 00 00            145 	int 0x0000 ;int28
      00007C 82 00 00 00            146 	int 0x0000 ;int29
                                    147 ;--------------------------------------------------------
                                    148 ; global & static initialisations
                                    149 ;--------------------------------------------------------
                                    150 	.area HOME
                                    151 	.area GSINIT
                                    152 	.area GSFINAL
                                    153 	.area GSINIT
      000000                        154 __sdcc_gs_init_startup:
      000000                        155 __sdcc_init_data:
                                    156 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  157 	ldw x, #l_DATA
      000003 27 07            [ 1]  158 	jreq	00002$
      000005                        159 00001$:
      000005 72 4FuFFuFF      [ 1]  160 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  161 	decw x
      00000A 26 F9            [ 1]  162 	jrne	00001$
      00000C                        163 00002$:
      00000C AEr00r00         [ 2]  164 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  165 	jreq	00004$
      000011                        166 00003$:
      000011 D6uFFuFF         [ 1]  167 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  168 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  169 	decw	x
      000018 26 F7            [ 1]  170 	jrne	00003$
      00001A                        171 00004$:
                                    172 ; stm8_genXINIT() end
                                    173 	.area GSFINAL
      000000 CCr00r80         [ 2]  174 	jp	__sdcc_program_startup
                                    175 ;--------------------------------------------------------
                                    176 ; Home
                                    177 ;--------------------------------------------------------
                                    178 	.area HOME
                                    179 	.area HOME
      000080                        180 __sdcc_program_startup:
      000080 CCr06rCE         [ 2]  181 	jp	_main
                                    182 ;	return from main will return to caller
                                    183 ;--------------------------------------------------------
                                    184 ; code
                                    185 ;--------------------------------------------------------
                                    186 	.area CODE
                                    187 ;	joysticksend.c: 32: void delayTenMicro (void) {
                                    188 ;	-----------------------------------------
                                    189 ;	 function delayTenMicro
                                    190 ;	-----------------------------------------
      000000                        191 _delayTenMicro:
                                    192 ;	joysticksend.c: 34: for (a = 0; a < 50; ++a)
      000000 A6 32            [ 1]  193 	ld	a, #0x32
      000002                        194 00104$:
                                    195 ;	joysticksend.c: 35: __asm__("nop");
      000002 9D               [ 1]  196 	nop
      000003 4A               [ 1]  197 	dec	a
                                    198 ;	joysticksend.c: 34: for (a = 0; a < 50; ++a)
      000004 4D               [ 1]  199 	tnz	a
      000005 26 FB            [ 1]  200 	jrne	00104$
      000007 81               [ 4]  201 	ret
                                    202 ;	joysticksend.c: 37: UCHAR write_spi (UCHAR value) {
                                    203 ;	-----------------------------------------
                                    204 ;	 function write_spi
                                    205 ;	-----------------------------------------
      000008                        206 _write_spi:
                                    207 ;	joysticksend.c: 39: delayTenMicro ();
      000008 CDr00r00         [ 4]  208 	call	_delayTenMicro
                                    209 ;	joysticksend.c: 40: SPI_DR = value;
      00000B AE 52 04         [ 2]  210 	ldw	x, #0x5204
      00000E 7B 03            [ 1]  211 	ld	a, (0x03, sp)
      000010 F7               [ 1]  212 	ld	(x), a
                                    213 ;	joysticksend.c: 41: delayTenMicro ();
      000011 CDr00r00         [ 4]  214 	call	_delayTenMicro
                                    215 ;	joysticksend.c: 42: while ((SPI_SR & TXE) == 0);
      000014                        216 00101$:
      000014 AE 52 03         [ 2]  217 	ldw	x, #0x5203
      000017 F6               [ 1]  218 	ld	a, (x)
      000018 A5 02            [ 1]  219 	bcp	a, #0x02
      00001A 27 F8            [ 1]  220 	jreq	00101$
                                    221 ;	joysticksend.c: 43: delayTenMicro ();
      00001C CDr00r00         [ 4]  222 	call	_delayTenMicro
                                    223 ;	joysticksend.c: 44: while ((SPI_SR & RXNE) == 0);
      00001F                        224 00104$:
      00001F AE 52 03         [ 2]  225 	ldw	x, #0x5203
      000022 F6               [ 1]  226 	ld	a, (x)
      000023 44               [ 1]  227 	srl	a
      000024 24 F9            [ 1]  228 	jrnc	00104$
                                    229 ;	joysticksend.c: 45: delayTenMicro ();
      000026 CDr00r00         [ 4]  230 	call	_delayTenMicro
                                    231 ;	joysticksend.c: 46: ret = SPI_DR;
      000029 AE 52 04         [ 2]  232 	ldw	x, #0x5204
      00002C F6               [ 1]  233 	ld	a, (x)
                                    234 ;	joysticksend.c: 47: return (ret);
      00002D 81               [ 4]  235 	ret
                                    236 ;	joysticksend.c: 49: UCHAR write_spi_reg (UCHAR reg, UCHAR value) {
                                    237 ;	-----------------------------------------
                                    238 ;	 function write_spi_reg
                                    239 ;	-----------------------------------------
      00002E                        240 _write_spi_reg:
      00002E 88               [ 1]  241 	push	a
                                    242 ;	joysticksend.c: 51: PC_ODR &= ~(1 << CSN);
      00002F AE 50 0A         [ 2]  243 	ldw	x, #0x500a
      000032 F6               [ 1]  244 	ld	a, (x)
      000033 A4 EF            [ 1]  245 	and	a, #0xef
      000035 F7               [ 1]  246 	ld	(x), a
                                    247 ;	joysticksend.c: 52: ret = write_spi (reg);
      000036 7B 04            [ 1]  248 	ld	a, (0x04, sp)
      000038 88               [ 1]  249 	push	a
      000039 CDr00r08         [ 4]  250 	call	_write_spi
      00003C 5B 01            [ 2]  251 	addw	sp, #1
      00003E 6B 01            [ 1]  252 	ld	(0x01, sp), a
                                    253 ;	joysticksend.c: 53: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      000040 7B 04            [ 1]  254 	ld	a, (0x04, sp)
      000042 A1 FF            [ 1]  255 	cp	a, #0xff
      000044 27 15            [ 1]  256 	jreq	00102$
      000046 7B 04            [ 1]  257 	ld	a, (0x04, sp)
      000048 A1 E2            [ 1]  258 	cp	a, #0xe2
      00004A 27 0F            [ 1]  259 	jreq	00102$
      00004C 7B 04            [ 1]  260 	ld	a, (0x04, sp)
      00004E A1 E1            [ 1]  261 	cp	a, #0xe1
      000050 27 09            [ 1]  262 	jreq	00102$
                                    263 ;	joysticksend.c: 54: write_spi (value);
      000052 7B 05            [ 1]  264 	ld	a, (0x05, sp)
      000054 88               [ 1]  265 	push	a
      000055 CDr00r08         [ 4]  266 	call	_write_spi
      000058 84               [ 1]  267 	pop	a
      000059 20 03            [ 2]  268 	jra	00103$
      00005B                        269 00102$:
                                    270 ;	joysticksend.c: 56: delayTenMicro ();
      00005B CDr00r00         [ 4]  271 	call	_delayTenMicro
      00005E                        272 00103$:
                                    273 ;	joysticksend.c: 57: PC_ODR |= (1 << CSN);
      00005E AE 50 0A         [ 2]  274 	ldw	x, #0x500a
      000061 F6               [ 1]  275 	ld	a, (x)
      000062 AA 10            [ 1]  276 	or	a, #0x10
      000064 F7               [ 1]  277 	ld	(x), a
                                    278 ;	joysticksend.c: 58: return (ret);
      000065 7B 01            [ 1]  279 	ld	a, (0x01, sp)
      000067 5B 01            [ 2]  280 	addw	sp, #1
      000069 81               [ 4]  281 	ret
                                    282 ;	joysticksend.c: 60: UCHAR read_spi_reg (UCHAR reg) {
                                    283 ;	-----------------------------------------
                                    284 ;	 function read_spi_reg
                                    285 ;	-----------------------------------------
      00006A                        286 _read_spi_reg:
      00006A 88               [ 1]  287 	push	a
                                    288 ;	joysticksend.c: 62: PC_ODR &= ~(1 << CSN);
      00006B AE 50 0A         [ 2]  289 	ldw	x, #0x500a
      00006E F6               [ 1]  290 	ld	a, (x)
      00006F A4 EF            [ 1]  291 	and	a, #0xef
      000071 F7               [ 1]  292 	ld	(x), a
                                    293 ;	joysticksend.c: 63: ret = write_spi (reg);
      000072 7B 04            [ 1]  294 	ld	a, (0x04, sp)
      000074 88               [ 1]  295 	push	a
      000075 CDr00r08         [ 4]  296 	call	_write_spi
      000078 5B 01            [ 2]  297 	addw	sp, #1
      00007A 6B 01            [ 1]  298 	ld	(0x01, sp), a
                                    299 ;	joysticksend.c: 64: if (reg != NOP && reg != FLUSH_RX && reg != FLUSH_TX)
      00007C 7B 04            [ 1]  300 	ld	a, (0x04, sp)
      00007E A1 FF            [ 1]  301 	cp	a, #0xff
      000080 27 17            [ 1]  302 	jreq	00102$
      000082 7B 04            [ 1]  303 	ld	a, (0x04, sp)
      000084 A1 E2            [ 1]  304 	cp	a, #0xe2
      000086 27 11            [ 1]  305 	jreq	00102$
      000088 7B 04            [ 1]  306 	ld	a, (0x04, sp)
      00008A A1 E1            [ 1]  307 	cp	a, #0xe1
      00008C 27 0B            [ 1]  308 	jreq	00102$
                                    309 ;	joysticksend.c: 65: ret = write_spi (NOP);
      00008E 4B FF            [ 1]  310 	push	#0xff
      000090 CDr00r08         [ 4]  311 	call	_write_spi
      000093 5B 01            [ 2]  312 	addw	sp, #1
      000095 6B 01            [ 1]  313 	ld	(0x01, sp), a
      000097 20 03            [ 2]  314 	jra	00103$
      000099                        315 00102$:
                                    316 ;	joysticksend.c: 67: delayTenMicro ();
      000099 CDr00r00         [ 4]  317 	call	_delayTenMicro
      00009C                        318 00103$:
                                    319 ;	joysticksend.c: 68: PC_ODR |= (1 << CSN);
      00009C AE 50 0A         [ 2]  320 	ldw	x, #0x500a
      00009F F6               [ 1]  321 	ld	a, (x)
      0000A0 AA 10            [ 1]  322 	or	a, #0x10
      0000A2 F7               [ 1]  323 	ld	(x), a
                                    324 ;	joysticksend.c: 69: return (ret);
      0000A3 7B 01            [ 1]  325 	ld	a, (0x01, sp)
      0000A5 5B 01            [ 2]  326 	addw	sp, #1
      0000A7 81               [ 4]  327 	ret
                                    328 ;	joysticksend.c: 71: UCHAR write_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    329 ;	-----------------------------------------
                                    330 ;	 function write_spi_buf
                                    331 ;	-----------------------------------------
      0000A8                        332 _write_spi_buf:
      0000A8 52 02            [ 2]  333 	sub	sp, #2
                                    334 ;	joysticksend.c: 73: PC_ODR &= ~(1 << CSN);
      0000AA AE 50 0A         [ 2]  335 	ldw	x, #0x500a
      0000AD F6               [ 1]  336 	ld	a, (x)
      0000AE A4 EF            [ 1]  337 	and	a, #0xef
      0000B0 F7               [ 1]  338 	ld	(x), a
                                    339 ;	joysticksend.c: 74: ret = write_spi (reg);
      0000B1 7B 05            [ 1]  340 	ld	a, (0x05, sp)
      0000B3 88               [ 1]  341 	push	a
      0000B4 CDr00r08         [ 4]  342 	call	_write_spi
      0000B7 5B 01            [ 2]  343 	addw	sp, #1
      0000B9 6B 02            [ 1]  344 	ld	(0x02, sp), a
                                    345 ;	joysticksend.c: 75: for (n = 0; n < len; ++n)
      0000BB 0F 01            [ 1]  346 	clr	(0x01, sp)
      0000BD                        347 00103$:
      0000BD 7B 01            [ 1]  348 	ld	a, (0x01, sp)
      0000BF 11 08            [ 1]  349 	cp	a, (0x08, sp)
      0000C1 24 11            [ 1]  350 	jrnc	00101$
                                    351 ;	joysticksend.c: 76: write_spi (array[n]);
      0000C3 5F               [ 1]  352 	clrw	x
      0000C4 7B 01            [ 1]  353 	ld	a, (0x01, sp)
      0000C6 97               [ 1]  354 	ld	xl, a
      0000C7 72 FB 06         [ 2]  355 	addw	x, (0x06, sp)
      0000CA F6               [ 1]  356 	ld	a, (x)
      0000CB 88               [ 1]  357 	push	a
      0000CC CDr00r08         [ 4]  358 	call	_write_spi
      0000CF 84               [ 1]  359 	pop	a
                                    360 ;	joysticksend.c: 75: for (n = 0; n < len; ++n)
      0000D0 0C 01            [ 1]  361 	inc	(0x01, sp)
      0000D2 20 E9            [ 2]  362 	jra	00103$
      0000D4                        363 00101$:
                                    364 ;	joysticksend.c: 77: PC_ODR |= (1 << CSN);
      0000D4 AE 50 0A         [ 2]  365 	ldw	x, #0x500a
      0000D7 F6               [ 1]  366 	ld	a, (x)
      0000D8 AA 10            [ 1]  367 	or	a, #0x10
      0000DA F7               [ 1]  368 	ld	(x), a
                                    369 ;	joysticksend.c: 78: return (ret);
      0000DB 7B 02            [ 1]  370 	ld	a, (0x02, sp)
      0000DD 5B 02            [ 2]  371 	addw	sp, #2
      0000DF 81               [ 4]  372 	ret
                                    373 ;	joysticksend.c: 80: UCHAR read_spi_buf (UCHAR reg, UCHAR *array, UCHAR len) {
                                    374 ;	-----------------------------------------
                                    375 ;	 function read_spi_buf
                                    376 ;	-----------------------------------------
      0000E0                        377 _read_spi_buf:
      0000E0 52 02            [ 2]  378 	sub	sp, #2
                                    379 ;	joysticksend.c: 82: PC_ODR &= ~(1 << CSN);
      0000E2 AE 50 0A         [ 2]  380 	ldw	x, #0x500a
      0000E5 F6               [ 1]  381 	ld	a, (x)
      0000E6 A4 EF            [ 1]  382 	and	a, #0xef
      0000E8 F7               [ 1]  383 	ld	(x), a
                                    384 ;	joysticksend.c: 83: ret = write_spi (reg);
      0000E9 7B 05            [ 1]  385 	ld	a, (0x05, sp)
      0000EB 88               [ 1]  386 	push	a
      0000EC CDr00r08         [ 4]  387 	call	_write_spi
      0000EF 5B 01            [ 2]  388 	addw	sp, #1
      0000F1 6B 01            [ 1]  389 	ld	(0x01, sp), a
                                    390 ;	joysticksend.c: 84: for (n = 0; n < len; ++n)
      0000F3 0F 02            [ 1]  391 	clr	(0x02, sp)
      0000F5                        392 00103$:
      0000F5 7B 02            [ 1]  393 	ld	a, (0x02, sp)
      0000F7 11 08            [ 1]  394 	cp	a, (0x08, sp)
      0000F9 24 15            [ 1]  395 	jrnc	00101$
                                    396 ;	joysticksend.c: 85: array[n] = write_spi (NOP);
      0000FB 5F               [ 1]  397 	clrw	x
      0000FC 7B 02            [ 1]  398 	ld	a, (0x02, sp)
      0000FE 97               [ 1]  399 	ld	xl, a
      0000FF 72 FB 06         [ 2]  400 	addw	x, (0x06, sp)
      000102 89               [ 2]  401 	pushw	x
      000103 4B FF            [ 1]  402 	push	#0xff
      000105 CDr00r08         [ 4]  403 	call	_write_spi
      000108 5B 01            [ 2]  404 	addw	sp, #1
      00010A 85               [ 2]  405 	popw	x
      00010B F7               [ 1]  406 	ld	(x), a
                                    407 ;	joysticksend.c: 84: for (n = 0; n < len; ++n)
      00010C 0C 02            [ 1]  408 	inc	(0x02, sp)
      00010E 20 E5            [ 2]  409 	jra	00103$
      000110                        410 00101$:
                                    411 ;	joysticksend.c: 86: PC_ODR |= (1 << CSN);
      000110 AE 50 0A         [ 2]  412 	ldw	x, #0x500a
      000113 F6               [ 1]  413 	ld	a, (x)
      000114 AA 10            [ 1]  414 	or	a, #0x10
      000116 F7               [ 1]  415 	ld	(x), a
                                    416 ;	joysticksend.c: 87: return (ret);
      000117 7B 01            [ 1]  417 	ld	a, (0x01, sp)
      000119 5B 02            [ 2]  418 	addw	sp, #2
      00011B 81               [ 4]  419 	ret
                                    420 ;	joysticksend.c: 89: void InitializeSPI () {
                                    421 ;	-----------------------------------------
                                    422 ;	 function InitializeSPI
                                    423 ;	-----------------------------------------
      00011C                        424 _InitializeSPI:
                                    425 ;	joysticksend.c: 90: SPI_CR1 = MSBFIRST | SPI_ENABLE | BR_DIV256 | MASTER | CPOL0 | CPHA0;
      00011C AE 52 00         [ 2]  426 	ldw	x, #0x5200
      00011F A6 7C            [ 1]  427 	ld	a, #0x7c
      000121 F7               [ 1]  428 	ld	(x), a
                                    429 ;	joysticksend.c: 91: SPI_CR2 = BDM_2LINE | CRCEN_OFF | CRCNEXT_TXBUF | FULL_DUPLEX | SSM_DISABLE;
      000122 AE 52 01         [ 2]  430 	ldw	x, #0x5201
      000125 7F               [ 1]  431 	clr	(x)
                                    432 ;	joysticksend.c: 92: SPI_ICR = TXIE_MASKED | RXIE_MASKED | ERRIE_MASKED | WKIE_MASKED;
      000126 AE 52 02         [ 2]  433 	ldw	x, #0x5202
      000129 7F               [ 1]  434 	clr	(x)
                                    435 ;	joysticksend.c: 93: PC_DDR = (1 << PC3) | (1 << PC4); // output mode
      00012A AE 50 0C         [ 2]  436 	ldw	x, #0x500c
      00012D A6 18            [ 1]  437 	ld	a, #0x18
      00012F F7               [ 1]  438 	ld	(x), a
                                    439 ;	joysticksend.c: 94: PC_CR1 = (1 << PC3) | (1 << PC4); // push-pull
      000130 AE 50 0D         [ 2]  440 	ldw	x, #0x500d
      000133 A6 18            [ 1]  441 	ld	a, #0x18
      000135 F7               [ 1]  442 	ld	(x), a
                                    443 ;	joysticksend.c: 95: PC_CR2 = (1 << PC3) | (1 << PC4); // up to 10MHz speed
      000136 AE 50 0E         [ 2]  444 	ldw	x, #0x500e
      000139 A6 18            [ 1]  445 	ld	a, #0x18
      00013B F7               [ 1]  446 	ld	(x), a
                                    447 ;	joysticksend.c: 97: PC_ODR &= ~(1 << CE);
      00013C AE 50 0A         [ 2]  448 	ldw	x, #0x500a
      00013F F6               [ 1]  449 	ld	a, (x)
      000140 A4 F7            [ 1]  450 	and	a, #0xf7
      000142 F7               [ 1]  451 	ld	(x), a
      000143 81               [ 4]  452 	ret
                                    453 ;	joysticksend.c: 99: void InitializeSystemClock() {
                                    454 ;	-----------------------------------------
                                    455 ;	 function InitializeSystemClock
                                    456 ;	-----------------------------------------
      000144                        457 _InitializeSystemClock:
                                    458 ;	joysticksend.c: 100: CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
      000144 AE 50 C0         [ 2]  459 	ldw	x, #0x50c0
      000147 7F               [ 1]  460 	clr	(x)
                                    461 ;	joysticksend.c: 101: CLK_ICKR = CLK_HSIEN;               //  Enable the HSI.
      000148 AE 50 C0         [ 2]  462 	ldw	x, #0x50c0
      00014B A6 01            [ 1]  463 	ld	a, #0x01
      00014D F7               [ 1]  464 	ld	(x), a
                                    465 ;	joysticksend.c: 102: CLK_ECKR = 0;                       //  Disable the external clock.
      00014E AE 50 C1         [ 2]  466 	ldw	x, #0x50c1
      000151 7F               [ 1]  467 	clr	(x)
                                    468 ;	joysticksend.c: 103: while ((CLK_ICKR & CLK_HSIRDY) == 0);       //  Wait for the HSI to be ready for use.
      000152                        469 00101$:
      000152 AE 50 C0         [ 2]  470 	ldw	x, #0x50c0
      000155 F6               [ 1]  471 	ld	a, (x)
      000156 A5 02            [ 1]  472 	bcp	a, #0x02
      000158 27 F8            [ 1]  473 	jreq	00101$
                                    474 ;	joysticksend.c: 104: CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
      00015A AE 50 C6         [ 2]  475 	ldw	x, #0x50c6
      00015D 7F               [ 1]  476 	clr	(x)
                                    477 ;	joysticksend.c: 105: CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
      00015E AE 50 C7         [ 2]  478 	ldw	x, #0x50c7
      000161 A6 FF            [ 1]  479 	ld	a, #0xff
      000163 F7               [ 1]  480 	ld	(x), a
                                    481 ;	joysticksend.c: 106: CLK_PCKENR2 = 0xff;                 //  Ditto.
      000164 AE 50 CA         [ 2]  482 	ldw	x, #0x50ca
      000167 A6 FF            [ 1]  483 	ld	a, #0xff
      000169 F7               [ 1]  484 	ld	(x), a
                                    485 ;	joysticksend.c: 107: CLK_CCOR = 0;                       //  Turn off CCO.
      00016A AE 50 C9         [ 2]  486 	ldw	x, #0x50c9
      00016D 7F               [ 1]  487 	clr	(x)
                                    488 ;	joysticksend.c: 108: CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
      00016E AE 50 CC         [ 2]  489 	ldw	x, #0x50cc
      000171 7F               [ 1]  490 	clr	(x)
                                    491 ;	joysticksend.c: 109: CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
      000172 AE 50 CD         [ 2]  492 	ldw	x, #0x50cd
      000175 7F               [ 1]  493 	clr	(x)
                                    494 ;	joysticksend.c: 110: CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
      000176 AE 50 C4         [ 2]  495 	ldw	x, #0x50c4
      000179 A6 E1            [ 1]  496 	ld	a, #0xe1
      00017B F7               [ 1]  497 	ld	(x), a
                                    498 ;	joysticksend.c: 111: CLK_SWCR = 0;                       //  Reset the clock switch control register.
      00017C AE 50 C5         [ 2]  499 	ldw	x, #0x50c5
      00017F 7F               [ 1]  500 	clr	(x)
                                    501 ;	joysticksend.c: 112: CLK_SWCR = CLK_SWEN;                //  Enable switching.
      000180 AE 50 C5         [ 2]  502 	ldw	x, #0x50c5
      000183 A6 02            [ 1]  503 	ld	a, #0x02
      000185 F7               [ 1]  504 	ld	(x), a
                                    505 ;	joysticksend.c: 113: while ((CLK_SWCR & CLK_SWBSY) != 0);        //  Pause while the clock switch is busy.
      000186                        506 00104$:
      000186 AE 50 C5         [ 2]  507 	ldw	x, #0x50c5
      000189 F6               [ 1]  508 	ld	a, (x)
      00018A 44               [ 1]  509 	srl	a
      00018B 25 F9            [ 1]  510 	jrc	00104$
      00018D 81               [ 4]  511 	ret
                                    512 ;	joysticksend.c: 115: void delay (int time_ms) {
                                    513 ;	-----------------------------------------
                                    514 ;	 function delay
                                    515 ;	-----------------------------------------
      00018E                        516 _delay:
      00018E 52 0A            [ 2]  517 	sub	sp, #10
                                    518 ;	joysticksend.c: 117: for (x = 0; x < 1036*time_ms; ++x)
      000190 5F               [ 1]  519 	clrw	x
      000191 1F 03            [ 2]  520 	ldw	(0x03, sp), x
      000193 1F 01            [ 2]  521 	ldw	(0x01, sp), x
      000195 1E 0D            [ 2]  522 	ldw	x, (0x0d, sp)
      000197 89               [ 2]  523 	pushw	x
      000198 4B 0C            [ 1]  524 	push	#0x0c
      00019A 4B 04            [ 1]  525 	push	#0x04
      00019C CDr00r00         [ 4]  526 	call	__mulint
      00019F 5B 04            [ 2]  527 	addw	sp, #4
      0001A1 1F 05            [ 2]  528 	ldw	(0x05, sp), x
      0001A3                        529 00103$:
      0001A3 16 05            [ 2]  530 	ldw	y, (0x05, sp)
      0001A5 17 09            [ 2]  531 	ldw	(0x09, sp), y
      0001A7 7B 09            [ 1]  532 	ld	a, (0x09, sp)
      0001A9 49               [ 1]  533 	rlc	a
      0001AA 4F               [ 1]  534 	clr	a
      0001AB A2 00            [ 1]  535 	sbc	a, #0x00
      0001AD 6B 08            [ 1]  536 	ld	(0x08, sp), a
      0001AF 6B 07            [ 1]  537 	ld	(0x07, sp), a
      0001B1 1E 03            [ 2]  538 	ldw	x, (0x03, sp)
      0001B3 13 09            [ 2]  539 	cpw	x, (0x09, sp)
      0001B5 7B 02            [ 1]  540 	ld	a, (0x02, sp)
      0001B7 12 08            [ 1]  541 	sbc	a, (0x08, sp)
      0001B9 7B 01            [ 1]  542 	ld	a, (0x01, sp)
      0001BB 12 07            [ 1]  543 	sbc	a, (0x07, sp)
      0001BD 2E 17            [ 1]  544 	jrsge	00105$
                                    545 ;	joysticksend.c: 118: __asm__("nop");
      0001BF 9D               [ 1]  546 	nop
                                    547 ;	joysticksend.c: 117: for (x = 0; x < 1036*time_ms; ++x)
      0001C0 16 03            [ 2]  548 	ldw	y, (0x03, sp)
      0001C2 72 A9 00 01      [ 2]  549 	addw	y, #0x0001
      0001C6 7B 02            [ 1]  550 	ld	a, (0x02, sp)
      0001C8 A9 00            [ 1]  551 	adc	a, #0x00
      0001CA 97               [ 1]  552 	ld	xl, a
      0001CB 7B 01            [ 1]  553 	ld	a, (0x01, sp)
      0001CD A9 00            [ 1]  554 	adc	a, #0x00
      0001CF 95               [ 1]  555 	ld	xh, a
      0001D0 17 03            [ 2]  556 	ldw	(0x03, sp), y
      0001D2 1F 01            [ 2]  557 	ldw	(0x01, sp), x
      0001D4 20 CD            [ 2]  558 	jra	00103$
      0001D6                        559 00105$:
      0001D6 5B 0A            [ 2]  560 	addw	sp, #10
      0001D8 81               [ 4]  561 	ret
                                    562 ;	joysticksend.c: 124: void UARTPrintF (char *message) {
                                    563 ;	-----------------------------------------
                                    564 ;	 function UARTPrintF
                                    565 ;	-----------------------------------------
      0001D9                        566 _UARTPrintF:
                                    567 ;	joysticksend.c: 125: char *ch = message;
      0001D9 16 03            [ 2]  568 	ldw	y, (0x03, sp)
                                    569 ;	joysticksend.c: 126: while (*ch) {
      0001DB                        570 00104$:
      0001DB 90 F6            [ 1]  571 	ld	a, (y)
      0001DD 4D               [ 1]  572 	tnz	a
      0001DE 27 0F            [ 1]  573 	jreq	00107$
                                    574 ;	joysticksend.c: 127: UART1_DR = (unsigned char) *ch;     //  Put the next character into the data transmission register.
      0001E0 AE 52 31         [ 2]  575 	ldw	x, #0x5231
      0001E3 F7               [ 1]  576 	ld	(x), a
                                    577 ;	joysticksend.c: 128: while ((UART1_SR & SR_TXE) == 0);   //  Wait for transmission to complete.
      0001E4                        578 00101$:
      0001E4 AE 52 30         [ 2]  579 	ldw	x, #0x5230
      0001E7 F6               [ 1]  580 	ld	a, (x)
      0001E8 48               [ 1]  581 	sll	a
      0001E9 24 F9            [ 1]  582 	jrnc	00101$
                                    583 ;	joysticksend.c: 129: ch++;                               //  Grab the next character.
      0001EB 90 5C            [ 2]  584 	incw	y
      0001ED 20 EC            [ 2]  585 	jra	00104$
      0001EF                        586 00107$:
      0001EF 81               [ 4]  587 	ret
                                    588 ;	joysticksend.c: 132: void print_UCHAR_hex (unsigned char buffer) {
                                    589 ;	-----------------------------------------
                                    590 ;	 function print_UCHAR_hex
                                    591 ;	-----------------------------------------
      0001F0                        592 _print_UCHAR_hex:
      0001F0 52 0C            [ 2]  593 	sub	sp, #12
                                    594 ;	joysticksend.c: 135: a = (buffer >> 4);
      0001F2 7B 0F            [ 1]  595 	ld	a, (0x0f, sp)
      0001F4 4E               [ 1]  596 	swap	a
      0001F5 A4 0F            [ 1]  597 	and	a, #0x0f
      0001F7 5F               [ 1]  598 	clrw	x
      0001F8 97               [ 1]  599 	ld	xl, a
                                    600 ;	joysticksend.c: 136: if (a > 9)
      0001F9 A3 00 09         [ 2]  601 	cpw	x, #0x0009
      0001FC 2D 07            [ 1]  602 	jrsle	00102$
                                    603 ;	joysticksend.c: 137: a = a + 'a' - 10;
      0001FE 1C 00 57         [ 2]  604 	addw	x, #0x0057
      000201 1F 0B            [ 2]  605 	ldw	(0x0b, sp), x
      000203 20 05            [ 2]  606 	jra	00103$
      000205                        607 00102$:
                                    608 ;	joysticksend.c: 139: a += '0'; 
      000205 1C 00 30         [ 2]  609 	addw	x, #0x0030
      000208 1F 0B            [ 2]  610 	ldw	(0x0b, sp), x
      00020A                        611 00103$:
                                    612 ;	joysticksend.c: 140: b = buffer & 0x0f;
      00020A 7B 0F            [ 1]  613 	ld	a, (0x0f, sp)
      00020C A4 0F            [ 1]  614 	and	a, #0x0f
      00020E 5F               [ 1]  615 	clrw	x
      00020F 97               [ 1]  616 	ld	xl, a
                                    617 ;	joysticksend.c: 141: if (b > 9)
      000210 A3 00 09         [ 2]  618 	cpw	x, #0x0009
      000213 2D 07            [ 1]  619 	jrsle	00105$
                                    620 ;	joysticksend.c: 142: b = b + 'a' - 10;
      000215 1C 00 57         [ 2]  621 	addw	x, #0x0057
      000218 1F 09            [ 2]  622 	ldw	(0x09, sp), x
      00021A 20 05            [ 2]  623 	jra	00106$
      00021C                        624 00105$:
                                    625 ;	joysticksend.c: 144: b += '0'; 
      00021C 1C 00 30         [ 2]  626 	addw	x, #0x0030
      00021F 1F 09            [ 2]  627 	ldw	(0x09, sp), x
      000221                        628 00106$:
                                    629 ;	joysticksend.c: 145: message[0] = a;
      000221 90 96            [ 1]  630 	ldw	y, sp
      000223 90 5C            [ 2]  631 	incw	y
      000225 7B 0C            [ 1]  632 	ld	a, (0x0c, sp)
      000227 90 F7            [ 1]  633 	ld	(y), a
                                    634 ;	joysticksend.c: 146: message[1] = b;
      000229 93               [ 1]  635 	ldw	x, y
      00022A 5C               [ 2]  636 	incw	x
      00022B 7B 0A            [ 1]  637 	ld	a, (0x0a, sp)
      00022D F7               [ 1]  638 	ld	(x), a
                                    639 ;	joysticksend.c: 147: message[2] = 0;
      00022E 93               [ 1]  640 	ldw	x, y
      00022F 5C               [ 2]  641 	incw	x
      000230 5C               [ 2]  642 	incw	x
      000231 7F               [ 1]  643 	clr	(x)
                                    644 ;	joysticksend.c: 148: UARTPrintF (message);
      000232 90 89            [ 2]  645 	pushw	y
      000234 CDr01rD9         [ 4]  646 	call	_UARTPrintF
      000237 5B 02            [ 2]  647 	addw	sp, #2
      000239 5B 0C            [ 2]  648 	addw	sp, #12
      00023B 81               [ 4]  649 	ret
                                    650 ;	joysticksend.c: 151: void InitializeUART() {
                                    651 ;	-----------------------------------------
                                    652 ;	 function InitializeUART
                                    653 ;	-----------------------------------------
      00023C                        654 _InitializeUART:
                                    655 ;	joysticksend.c: 161: UART1_CR1 = 0;
      00023C AE 52 34         [ 2]  656 	ldw	x, #0x5234
      00023F 7F               [ 1]  657 	clr	(x)
                                    658 ;	joysticksend.c: 162: UART1_CR2 = 0;
      000240 AE 52 35         [ 2]  659 	ldw	x, #0x5235
      000243 7F               [ 1]  660 	clr	(x)
                                    661 ;	joysticksend.c: 163: UART1_CR4 = 0;
      000244 AE 52 37         [ 2]  662 	ldw	x, #0x5237
      000247 7F               [ 1]  663 	clr	(x)
                                    664 ;	joysticksend.c: 164: UART1_CR3 = 0;
      000248 AE 52 36         [ 2]  665 	ldw	x, #0x5236
      00024B 7F               [ 1]  666 	clr	(x)
                                    667 ;	joysticksend.c: 165: UART1_CR5 = 0;
      00024C AE 52 38         [ 2]  668 	ldw	x, #0x5238
      00024F 7F               [ 1]  669 	clr	(x)
                                    670 ;	joysticksend.c: 166: UART1_GTR = 0;
      000250 AE 52 39         [ 2]  671 	ldw	x, #0x5239
      000253 7F               [ 1]  672 	clr	(x)
                                    673 ;	joysticksend.c: 167: UART1_PSCR = 0;
      000254 AE 52 3A         [ 2]  674 	ldw	x, #0x523a
      000257 7F               [ 1]  675 	clr	(x)
                                    676 ;	joysticksend.c: 171: UNSET (UART1_CR1, CR1_M);        //  8 Data bits.
      000258 AE 52 34         [ 2]  677 	ldw	x, #0x5234
      00025B F6               [ 1]  678 	ld	a, (x)
      00025C A4 EF            [ 1]  679 	and	a, #0xef
      00025E F7               [ 1]  680 	ld	(x), a
                                    681 ;	joysticksend.c: 172: UNSET (UART1_CR1, CR1_PCEN);     //  Disable parity.
      00025F AE 52 34         [ 2]  682 	ldw	x, #0x5234
      000262 F6               [ 1]  683 	ld	a, (x)
      000263 A4 FB            [ 1]  684 	and	a, #0xfb
      000265 F7               [ 1]  685 	ld	(x), a
                                    686 ;	joysticksend.c: 173: UNSET (UART1_CR3, CR3_STOPH);    //  1 stop bit.
      000266 AE 52 36         [ 2]  687 	ldw	x, #0x5236
      000269 F6               [ 1]  688 	ld	a, (x)
      00026A A4 DF            [ 1]  689 	and	a, #0xdf
      00026C F7               [ 1]  690 	ld	(x), a
                                    691 ;	joysticksend.c: 174: UNSET (UART1_CR3, CR3_STOPL);    //  1 stop bit.
      00026D AE 52 36         [ 2]  692 	ldw	x, #0x5236
      000270 F6               [ 1]  693 	ld	a, (x)
      000271 A4 EF            [ 1]  694 	and	a, #0xef
      000273 F7               [ 1]  695 	ld	(x), a
                                    696 ;	joysticksend.c: 175: UART1_BRR2 = 0x0a;      //  Set the baud rate registers to 115200 baud
      000274 AE 52 33         [ 2]  697 	ldw	x, #0x5233
      000277 A6 0A            [ 1]  698 	ld	a, #0x0a
      000279 F7               [ 1]  699 	ld	(x), a
                                    700 ;	joysticksend.c: 176: UART1_BRR1 = 0x08;      //  based upon a 16 MHz system clock.
      00027A AE 52 32         [ 2]  701 	ldw	x, #0x5232
      00027D A6 08            [ 1]  702 	ld	a, #0x08
      00027F F7               [ 1]  703 	ld	(x), a
                                    704 ;	joysticksend.c: 180: UNSET (UART1_CR2, CR2_TEN);      //  Disable transmit.
      000280 AE 52 35         [ 2]  705 	ldw	x, #0x5235
      000283 F6               [ 1]  706 	ld	a, (x)
      000284 A4 F7            [ 1]  707 	and	a, #0xf7
      000286 F7               [ 1]  708 	ld	(x), a
                                    709 ;	joysticksend.c: 181: UNSET (UART1_CR2, CR2_REN);      //  Disable receive.
      000287 AE 52 35         [ 2]  710 	ldw	x, #0x5235
      00028A F6               [ 1]  711 	ld	a, (x)
      00028B A4 FB            [ 1]  712 	and	a, #0xfb
      00028D F7               [ 1]  713 	ld	(x), a
                                    714 ;	joysticksend.c: 185: SET (UART1_CR3, CR3_CPOL);
      00028E AE 52 36         [ 2]  715 	ldw	x, #0x5236
      000291 F6               [ 1]  716 	ld	a, (x)
      000292 AA 04            [ 1]  717 	or	a, #0x04
      000294 F7               [ 1]  718 	ld	(x), a
                                    719 ;	joysticksend.c: 186: SET (UART1_CR3, CR3_CPHA);
      000295 AE 52 36         [ 2]  720 	ldw	x, #0x5236
      000298 F6               [ 1]  721 	ld	a, (x)
      000299 AA 02            [ 1]  722 	or	a, #0x02
      00029B F7               [ 1]  723 	ld	(x), a
                                    724 ;	joysticksend.c: 187: SET (UART1_CR3, CR3_LBCL);
      00029C 72 10 52 36      [ 1]  725 	bset	0x5236, #0
                                    726 ;	joysticksend.c: 191: SET (UART1_CR2, CR2_TEN);
      0002A0 AE 52 35         [ 2]  727 	ldw	x, #0x5235
      0002A3 F6               [ 1]  728 	ld	a, (x)
      0002A4 AA 08            [ 1]  729 	or	a, #0x08
      0002A6 F7               [ 1]  730 	ld	(x), a
                                    731 ;	joysticksend.c: 192: SET (UART1_CR2, CR2_REN);
      0002A7 AE 52 35         [ 2]  732 	ldw	x, #0x5235
      0002AA F6               [ 1]  733 	ld	a, (x)
      0002AB AA 04            [ 1]  734 	or	a, #0x04
      0002AD F7               [ 1]  735 	ld	(x), a
                                    736 ;	joysticksend.c: 193: UART1_CR3 = CR3_CLKEN;
      0002AE AE 52 36         [ 2]  737 	ldw	x, #0x5236
      0002B1 A6 08            [ 1]  738 	ld	a, #0x08
      0002B3 F7               [ 1]  739 	ld	(x), a
      0002B4 81               [ 4]  740 	ret
                                    741 ;	joysticksend.c: 267: void init_io(void)
                                    742 ;	-----------------------------------------
                                    743 ;	 function init_io
                                    744 ;	-----------------------------------------
      0002B5                        745 _init_io:
                                    746 ;	joysticksend.c: 276: PC_ODR &= ~(1 << CE);
      0002B5 AE 50 0A         [ 2]  747 	ldw	x, #0x500a
      0002B8 F6               [ 1]  748 	ld	a, (x)
      0002B9 A4 F7            [ 1]  749 	and	a, #0xf7
      0002BB F7               [ 1]  750 	ld	(x), a
                                    751 ;	joysticksend.c: 278: PC_ODR |= (1 << CSN);
      0002BC AE 50 0A         [ 2]  752 	ldw	x, #0x500a
      0002BF F6               [ 1]  753 	ld	a, (x)
      0002C0 AA 10            [ 1]  754 	or	a, #0x10
      0002C2 F7               [ 1]  755 	ld	(x), a
      0002C3 81               [ 4]  756 	ret
                                    757 ;	joysticksend.c: 284: void rf_switch_bank(unsigned char bankindex)
                                    758 ;	-----------------------------------------
                                    759 ;	 function rf_switch_bank
                                    760 ;	-----------------------------------------
      0002C4                        761 _rf_switch_bank:
      0002C4 88               [ 1]  762 	push	a
                                    763 ;	joysticksend.c: 287: temp1 = bankindex;
      0002C5 7B 04            [ 1]  764 	ld	a, (0x04, sp)
      0002C7 6B 01            [ 1]  765 	ld	(0x01, sp), a
                                    766 ;	joysticksend.c: 289: temp0 = write_spi(iRF_BANK0_STATUS);
      0002C9 4B 07            [ 1]  767 	push	#0x07
      0002CB CDr00r08         [ 4]  768 	call	_write_spi
      0002CE 5B 01            [ 2]  769 	addw	sp, #1
                                    770 ;	joysticksend.c: 291: if((temp0&0x80)!=temp1)
      0002D0 A4 80            [ 1]  771 	and	a, #0x80
      0002D2 11 01            [ 1]  772 	cp	a, (0x01, sp)
      0002D4 27 09            [ 1]  773 	jreq	00103$
                                    774 ;	joysticksend.c: 293: write_spi_reg(iRF_CMD_ACTIVATE,0x53);
      0002D6 4B 53            [ 1]  775 	push	#0x53
      0002D8 4B 50            [ 1]  776 	push	#0x50
      0002DA CDr00r2E         [ 4]  777 	call	_write_spi_reg
      0002DD 5B 02            [ 2]  778 	addw	sp, #2
      0002DF                        779 00103$:
      0002DF 84               [ 1]  780 	pop	a
      0002E0 81               [ 4]  781 	ret
                                    782 ;	joysticksend.c: 300: void SE8R01_Calibration()
                                    783 ;	-----------------------------------------
                                    784 ;	 function SE8R01_Calibration
                                    785 ;	-----------------------------------------
      0002E1                        786 _SE8R01_Calibration:
      0002E1 52 0D            [ 2]  787 	sub	sp, #13
                                    788 ;	joysticksend.c: 303: rf_switch_bank(iBANK0);
      0002E3 4B 00            [ 1]  789 	push	#0x00
      0002E5 CDr02rC4         [ 4]  790 	call	_rf_switch_bank
      0002E8 84               [ 1]  791 	pop	a
                                    792 ;	joysticksend.c: 304: temp[0]=0x03;
      0002E9 96               [ 1]  793 	ldw	x, sp
      0002EA 5C               [ 2]  794 	incw	x
      0002EB 1F 06            [ 2]  795 	ldw	(0x06, sp), x
      0002ED 1E 06            [ 2]  796 	ldw	x, (0x06, sp)
      0002EF A6 03            [ 1]  797 	ld	a, #0x03
      0002F1 F7               [ 1]  798 	ld	(x), a
                                    799 ;	joysticksend.c: 305: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_CONFIG,temp, 1);
      0002F2 1E 06            [ 2]  800 	ldw	x, (0x06, sp)
      0002F4 4B 01            [ 1]  801 	push	#0x01
      0002F6 89               [ 2]  802 	pushw	x
      0002F7 4B 20            [ 1]  803 	push	#0x20
      0002F9 CDr00rA8         [ 4]  804 	call	_write_spi_buf
      0002FC 5B 04            [ 2]  805 	addw	sp, #4
                                    806 ;	joysticksend.c: 307: temp[0]=0x32;
      0002FE 1E 06            [ 2]  807 	ldw	x, (0x06, sp)
      000300 A6 32            [ 1]  808 	ld	a, #0x32
      000302 F7               [ 1]  809 	ld	(x), a
                                    810 ;	joysticksend.c: 309: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_CH, temp,1);
      000303 1E 06            [ 2]  811 	ldw	x, (0x06, sp)
      000305 4B 01            [ 1]  812 	push	#0x01
      000307 89               [ 2]  813 	pushw	x
      000308 4B 25            [ 1]  814 	push	#0x25
      00030A CDr00rA8         [ 4]  815 	call	_write_spi_buf
      00030D 5B 04            [ 2]  816 	addw	sp, #4
                                    817 ;	joysticksend.c: 313: if (SE8R01_DR_2M==1)
      00030F CEu00u00         [ 2]  818 	ldw	x, _SE8R01_DR_2M+0
      000312 A3 00 01         [ 2]  819 	cpw	x, #0x0001
      000315 26 07            [ 1]  820 	jrne	00105$
                                    821 ;	joysticksend.c: 314: {temp[0]=0x48;}
      000317 1E 06            [ 2]  822 	ldw	x, (0x06, sp)
      000319 A6 48            [ 1]  823 	ld	a, #0x48
      00031B F7               [ 1]  824 	ld	(x), a
      00031C 20 14            [ 2]  825 	jra	00106$
      00031E                        826 00105$:
                                    827 ;	joysticksend.c: 315: else if (SE8R01_DR_1M==1)
      00031E CEu00u02         [ 2]  828 	ldw	x, _SE8R01_DR_1M+0
      000321 A3 00 01         [ 2]  829 	cpw	x, #0x0001
      000324 26 07            [ 1]  830 	jrne	00102$
                                    831 ;	joysticksend.c: 316: {temp[0]=0x40;}
      000326 1E 06            [ 2]  832 	ldw	x, (0x06, sp)
      000328 A6 40            [ 1]  833 	ld	a, #0x40
      00032A F7               [ 1]  834 	ld	(x), a
      00032B 20 05            [ 2]  835 	jra	00106$
      00032D                        836 00102$:
                                    837 ;	joysticksend.c: 318: {temp[0]=0x68;}   
      00032D 1E 06            [ 2]  838 	ldw	x, (0x06, sp)
      00032F A6 68            [ 1]  839 	ld	a, #0x68
      000331 F7               [ 1]  840 	ld	(x), a
      000332                        841 00106$:
                                    842 ;	joysticksend.c: 320: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000332 1E 06            [ 2]  843 	ldw	x, (0x06, sp)
      000334 4B 01            [ 1]  844 	push	#0x01
      000336 89               [ 2]  845 	pushw	x
      000337 4B 26            [ 1]  846 	push	#0x26
      000339 CDr00rA8         [ 4]  847 	call	_write_spi_buf
      00033C 5B 04            [ 2]  848 	addw	sp, #4
                                    849 ;	joysticksend.c: 321: temp[0]=0x77;
      00033E 1E 06            [ 2]  850 	ldw	x, (0x06, sp)
      000340 A6 77            [ 1]  851 	ld	a, #0x77
      000342 F7               [ 1]  852 	ld	(x), a
                                    853 ;	joysticksend.c: 322: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_PRE_GURD, temp,1);
      000343 1E 06            [ 2]  854 	ldw	x, (0x06, sp)
      000345 4B 01            [ 1]  855 	push	#0x01
      000347 89               [ 2]  856 	pushw	x
      000348 4B 3F            [ 1]  857 	push	#0x3f
      00034A CDr00rA8         [ 4]  858 	call	_write_spi_buf
      00034D 5B 04            [ 2]  859 	addw	sp, #4
                                    860 ;	joysticksend.c: 324: rf_switch_bank(iBANK1);
      00034F 4B 80            [ 1]  861 	push	#0x80
      000351 CDr02rC4         [ 4]  862 	call	_rf_switch_bank
      000354 84               [ 1]  863 	pop	a
                                    864 ;	joysticksend.c: 325: temp[0]=0x40;
      000355 1E 06            [ 2]  865 	ldw	x, (0x06, sp)
      000357 A6 40            [ 1]  866 	ld	a, #0x40
      000359 F7               [ 1]  867 	ld	(x), a
                                    868 ;	joysticksend.c: 326: temp[1]=0x00;
      00035A 1E 06            [ 2]  869 	ldw	x, (0x06, sp)
      00035C 5C               [ 2]  870 	incw	x
      00035D 1F 0C            [ 2]  871 	ldw	(0x0c, sp), x
      00035F 1E 0C            [ 2]  872 	ldw	x, (0x0c, sp)
      000361 7F               [ 1]  873 	clr	(x)
                                    874 ;	joysticksend.c: 327: temp[2]=0x10;
      000362 1E 06            [ 2]  875 	ldw	x, (0x06, sp)
      000364 5C               [ 2]  876 	incw	x
      000365 5C               [ 2]  877 	incw	x
      000366 1F 0A            [ 2]  878 	ldw	(0x0a, sp), x
      000368 1E 0A            [ 2]  879 	ldw	x, (0x0a, sp)
      00036A A6 10            [ 1]  880 	ld	a, #0x10
      00036C F7               [ 1]  881 	ld	(x), a
                                    882 ;	joysticksend.c: 329: {temp[3]=0xE6;}
      00036D 1E 06            [ 2]  883 	ldw	x, (0x06, sp)
      00036F 1C 00 03         [ 2]  884 	addw	x, #0x0003
      000372 1F 08            [ 2]  885 	ldw	(0x08, sp), x
                                    886 ;	joysticksend.c: 328: if (SE8R01_DR_2M==1)
      000374 CEu00u00         [ 2]  887 	ldw	x, _SE8R01_DR_2M+0
      000377 A3 00 01         [ 2]  888 	cpw	x, #0x0001
      00037A 26 07            [ 1]  889 	jrne	00108$
                                    890 ;	joysticksend.c: 329: {temp[3]=0xE6;}
      00037C 1E 08            [ 2]  891 	ldw	x, (0x08, sp)
      00037E A6 E6            [ 1]  892 	ld	a, #0xe6
      000380 F7               [ 1]  893 	ld	(x), a
      000381 20 05            [ 2]  894 	jra	00109$
      000383                        895 00108$:
                                    896 ;	joysticksend.c: 331: {temp[3]=0xE4;}
      000383 1E 08            [ 2]  897 	ldw	x, (0x08, sp)
      000385 A6 E4            [ 1]  898 	ld	a, #0xe4
      000387 F7               [ 1]  899 	ld	(x), a
      000388                        900 00109$:
                                    901 ;	joysticksend.c: 333: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp, 4);
      000388 1E 06            [ 2]  902 	ldw	x, (0x06, sp)
      00038A 4B 04            [ 1]  903 	push	#0x04
      00038C 89               [ 2]  904 	pushw	x
      00038D 4B 21            [ 1]  905 	push	#0x21
      00038F CDr00rA8         [ 4]  906 	call	_write_spi_buf
      000392 5B 04            [ 2]  907 	addw	sp, #4
                                    908 ;	joysticksend.c: 335: temp[0]=0x20;
      000394 1E 06            [ 2]  909 	ldw	x, (0x06, sp)
      000396 A6 20            [ 1]  910 	ld	a, #0x20
      000398 F7               [ 1]  911 	ld	(x), a
                                    912 ;	joysticksend.c: 336: temp[1]=0x08;
      000399 1E 0C            [ 2]  913 	ldw	x, (0x0c, sp)
      00039B A6 08            [ 1]  914 	ld	a, #0x08
      00039D F7               [ 1]  915 	ld	(x), a
                                    916 ;	joysticksend.c: 337: temp[2]=0x50;
      00039E 1E 0A            [ 2]  917 	ldw	x, (0x0a, sp)
      0003A0 A6 50            [ 1]  918 	ld	a, #0x50
      0003A2 F7               [ 1]  919 	ld	(x), a
                                    920 ;	joysticksend.c: 338: temp[3]=0x40;
      0003A3 1E 08            [ 2]  921 	ldw	x, (0x08, sp)
      0003A5 A6 40            [ 1]  922 	ld	a, #0x40
      0003A7 F7               [ 1]  923 	ld	(x), a
                                    924 ;	joysticksend.c: 339: temp[4]=0x50;
      0003A8 1E 06            [ 2]  925 	ldw	x, (0x06, sp)
      0003AA A6 50            [ 1]  926 	ld	a, #0x50
      0003AC E7 04            [ 1]  927 	ld	(0x0004, x), a
                                    928 ;	joysticksend.c: 340: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp, 5);
      0003AE 1E 06            [ 2]  929 	ldw	x, (0x06, sp)
      0003B0 4B 05            [ 1]  930 	push	#0x05
      0003B2 89               [ 2]  931 	pushw	x
      0003B3 4B 23            [ 1]  932 	push	#0x23
      0003B5 CDr00rA8         [ 4]  933 	call	_write_spi_buf
      0003B8 5B 04            [ 2]  934 	addw	sp, #4
                                    935 ;	joysticksend.c: 342: temp[0]=0x00;
      0003BA 1E 06            [ 2]  936 	ldw	x, (0x06, sp)
      0003BC 7F               [ 1]  937 	clr	(x)
                                    938 ;	joysticksend.c: 343: temp[1]=0x00;
      0003BD 1E 0C            [ 2]  939 	ldw	x, (0x0c, sp)
      0003BF 7F               [ 1]  940 	clr	(x)
                                    941 ;	joysticksend.c: 344: if (SE8R01_DR_2M==1)
      0003C0 CEu00u00         [ 2]  942 	ldw	x, _SE8R01_DR_2M+0
      0003C3 A3 00 01         [ 2]  943 	cpw	x, #0x0001
      0003C6 26 07            [ 1]  944 	jrne	00111$
                                    945 ;	joysticksend.c: 345: { temp[2]=0x1E;}
      0003C8 1E 0A            [ 2]  946 	ldw	x, (0x0a, sp)
      0003CA A6 1E            [ 1]  947 	ld	a, #0x1e
      0003CC F7               [ 1]  948 	ld	(x), a
      0003CD 20 05            [ 2]  949 	jra	00112$
      0003CF                        950 00111$:
                                    951 ;	joysticksend.c: 347: { temp[2]=0x1F;}
      0003CF 1E 0A            [ 2]  952 	ldw	x, (0x0a, sp)
      0003D1 A6 1F            [ 1]  953 	ld	a, #0x1f
      0003D3 F7               [ 1]  954 	ld	(x), a
      0003D4                        955 00112$:
                                    956 ;	joysticksend.c: 349: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_IF_FREQ, temp, 3);
      0003D4 1E 06            [ 2]  957 	ldw	x, (0x06, sp)
      0003D6 4B 03            [ 1]  958 	push	#0x03
      0003D8 89               [ 2]  959 	pushw	x
      0003D9 4B 2A            [ 1]  960 	push	#0x2a
      0003DB CDr00rA8         [ 4]  961 	call	_write_spi_buf
      0003DE 5B 04            [ 2]  962 	addw	sp, #4
                                    963 ;	joysticksend.c: 351: if (SE8R01_DR_2M==1)
      0003E0 CEu00u00         [ 2]  964 	ldw	x, _SE8R01_DR_2M+0
      0003E3 A3 00 01         [ 2]  965 	cpw	x, #0x0001
      0003E6 26 07            [ 1]  966 	jrne	00114$
                                    967 ;	joysticksend.c: 352: { temp[0]=0x29;}
      0003E8 1E 06            [ 2]  968 	ldw	x, (0x06, sp)
      0003EA A6 29            [ 1]  969 	ld	a, #0x29
      0003EC F7               [ 1]  970 	ld	(x), a
      0003ED 20 05            [ 2]  971 	jra	00115$
      0003EF                        972 00114$:
                                    973 ;	joysticksend.c: 354: { temp[0]=0x14;}
      0003EF 1E 06            [ 2]  974 	ldw	x, (0x06, sp)
      0003F1 A6 14            [ 1]  975 	ld	a, #0x14
      0003F3 F7               [ 1]  976 	ld	(x), a
      0003F4                        977 00115$:
                                    978 ;	joysticksend.c: 356: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp, 1);
      0003F4 1E 06            [ 2]  979 	ldw	x, (0x06, sp)
      0003F6 4B 01            [ 1]  980 	push	#0x01
      0003F8 89               [ 2]  981 	pushw	x
      0003F9 4B 2C            [ 1]  982 	push	#0x2c
      0003FB CDr00rA8         [ 4]  983 	call	_write_spi_buf
      0003FE 5B 04            [ 2]  984 	addw	sp, #4
                                    985 ;	joysticksend.c: 358: temp[0]=0x00;
      000400 1E 06            [ 2]  986 	ldw	x, (0x06, sp)
      000402 7F               [ 1]  987 	clr	(x)
                                    988 ;	joysticksend.c: 359: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_LOW,temp,1);
      000403 1E 06            [ 2]  989 	ldw	x, (0x06, sp)
      000405 4B 01            [ 1]  990 	push	#0x01
      000407 89               [ 2]  991 	pushw	x
      000408 4B 37            [ 1]  992 	push	#0x37
      00040A CDr00rA8         [ 4]  993 	call	_write_spi_buf
      00040D 5B 04            [ 2]  994 	addw	sp, #4
                                    995 ;	joysticksend.c: 361: temp[0]=0x7F;
      00040F 1E 06            [ 2]  996 	ldw	x, (0x06, sp)
      000411 A6 7F            [ 1]  997 	ld	a, #0x7f
      000413 F7               [ 1]  998 	ld	(x), a
                                    999 ;	joysticksend.c: 362: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_DAC_CAL_HI,temp,1);
      000414 1E 06            [ 2] 1000 	ldw	x, (0x06, sp)
      000416 4B 01            [ 1] 1001 	push	#0x01
      000418 89               [ 2] 1002 	pushw	x
      000419 4B 38            [ 1] 1003 	push	#0x38
      00041B CDr00rA8         [ 4] 1004 	call	_write_spi_buf
      00041E 5B 04            [ 2] 1005 	addw	sp, #4
                                   1006 ;	joysticksend.c: 364: temp[0]=0x02;
      000420 1E 06            [ 2] 1007 	ldw	x, (0x06, sp)
      000422 A6 02            [ 1] 1008 	ld	a, #0x02
      000424 F7               [ 1] 1009 	ld	(x), a
                                   1010 ;	joysticksend.c: 365: temp[1]=0xC1;
      000425 1E 0C            [ 2] 1011 	ldw	x, (0x0c, sp)
      000427 A6 C1            [ 1] 1012 	ld	a, #0xc1
      000429 F7               [ 1] 1013 	ld	(x), a
                                   1014 ;	joysticksend.c: 366: temp[2]=0xEB;            
      00042A 1E 0A            [ 2] 1015 	ldw	x, (0x0a, sp)
      00042C A6 EB            [ 1] 1016 	ld	a, #0xeb
      00042E F7               [ 1] 1017 	ld	(x), a
                                   1018 ;	joysticksend.c: 367: temp[3]=0x1C;
      00042F 1E 08            [ 2] 1019 	ldw	x, (0x08, sp)
      000431 A6 1C            [ 1] 1020 	ld	a, #0x1c
      000433 F7               [ 1] 1021 	ld	(x), a
                                   1022 ;	joysticksend.c: 368: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      000434 1E 06            [ 2] 1023 	ldw	x, (0x06, sp)
      000436 4B 04            [ 1] 1024 	push	#0x04
      000438 89               [ 2] 1025 	pushw	x
      000439 4B 3D            [ 1] 1026 	push	#0x3d
      00043B CDr00rA8         [ 4] 1027 	call	_write_spi_buf
      00043E 5B 04            [ 2] 1028 	addw	sp, #4
                                   1029 ;	joysticksend.c: 370: temp[0]=0x97;
      000440 1E 06            [ 2] 1030 	ldw	x, (0x06, sp)
      000442 A6 97            [ 1] 1031 	ld	a, #0x97
      000444 F7               [ 1] 1032 	ld	(x), a
                                   1033 ;	joysticksend.c: 371: temp[1]=0x64;
      000445 1E 0C            [ 2] 1034 	ldw	x, (0x0c, sp)
      000447 A6 64            [ 1] 1035 	ld	a, #0x64
      000449 F7               [ 1] 1036 	ld	(x), a
                                   1037 ;	joysticksend.c: 372: temp[2]=0x00;
      00044A 1E 0A            [ 2] 1038 	ldw	x, (0x0a, sp)
      00044C 7F               [ 1] 1039 	clr	(x)
                                   1040 ;	joysticksend.c: 373: temp[3]=0x81;
      00044D 1E 08            [ 2] 1041 	ldw	x, (0x08, sp)
      00044F A6 81            [ 1] 1042 	ld	a, #0x81
      000451 F7               [ 1] 1043 	ld	(x), a
                                   1044 ;	joysticksend.c: 374: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp, 4);
      000452 1E 06            [ 2] 1045 	ldw	x, (0x06, sp)
      000454 4B 04            [ 1] 1046 	push	#0x04
      000456 89               [ 2] 1047 	pushw	x
      000457 4B 3E            [ 1] 1048 	push	#0x3e
      000459 CDr00rA8         [ 4] 1049 	call	_write_spi_buf
      00045C 5B 04            [ 2] 1050 	addw	sp, #4
                                   1051 ;	joysticksend.c: 375: rf_switch_bank(iBANK0);
      00045E 4B 00            [ 1] 1052 	push	#0x00
      000460 CDr02rC4         [ 4] 1053 	call	_rf_switch_bank
      000463 84               [ 1] 1054 	pop	a
                                   1055 ;	joysticksend.c: 380: delayTenMicro();
      000464 CDr00r00         [ 4] 1056 	call	_delayTenMicro
                                   1057 ;	joysticksend.c: 381: PC_ODR |= (1 << CE);
      000467 AE 50 0A         [ 2] 1058 	ldw	x, #0x500a
      00046A F6               [ 1] 1059 	ld	a, (x)
      00046B AA 08            [ 1] 1060 	or	a, #0x08
      00046D F7               [ 1] 1061 	ld	(x), a
                                   1062 ;	joysticksend.c: 382: delayTenMicro();
      00046E CDr00r00         [ 4] 1063 	call	_delayTenMicro
                                   1064 ;	joysticksend.c: 383: delayTenMicro();
      000471 CDr00r00         [ 4] 1065 	call	_delayTenMicro
                                   1066 ;	joysticksend.c: 384: delayTenMicro();
      000474 CDr00r00         [ 4] 1067 	call	_delayTenMicro
                                   1068 ;	joysticksend.c: 385: PC_ODR &= ~(1 << CE);
      000477 AE 50 0A         [ 2] 1069 	ldw	x, #0x500a
      00047A F6               [ 1] 1070 	ld	a, (x)
      00047B A4 F7            [ 1] 1071 	and	a, #0xf7
      00047D F7               [ 1] 1072 	ld	(x), a
                                   1073 ;	joysticksend.c: 386: delay(50);                            // delay 50ms waitting for calibaration.
      00047E 4B 32            [ 1] 1074 	push	#0x32
      000480 4B 00            [ 1] 1075 	push	#0x00
      000482 CDr01r8E         [ 4] 1076 	call	_delay
      000485 5B 02            [ 2] 1077 	addw	sp, #2
                                   1078 ;	joysticksend.c: 391: delayTenMicro();
      000487 CDr00r00         [ 4] 1079 	call	_delayTenMicro
                                   1080 ;	joysticksend.c: 392: PC_ODR |= (1 << CE);
      00048A AE 50 0A         [ 2] 1081 	ldw	x, #0x500a
      00048D F6               [ 1] 1082 	ld	a, (x)
      00048E AA 08            [ 1] 1083 	or	a, #0x08
      000490 F7               [ 1] 1084 	ld	(x), a
                                   1085 ;	joysticksend.c: 393: delayTenMicro();
      000491 CDr00r00         [ 4] 1086 	call	_delayTenMicro
                                   1087 ;	joysticksend.c: 394: delayTenMicro();
      000494 CDr00r00         [ 4] 1088 	call	_delayTenMicro
                                   1089 ;	joysticksend.c: 395: delayTenMicro();
      000497 CDr00r00         [ 4] 1090 	call	_delayTenMicro
                                   1091 ;	joysticksend.c: 396: PC_ODR &= ~(1 << CE);
      00049A AE 50 0A         [ 2] 1092 	ldw	x, #0x500a
      00049D F6               [ 1] 1093 	ld	a, (x)
      00049E A4 F7            [ 1] 1094 	and	a, #0xf7
      0004A0 F7               [ 1] 1095 	ld	(x), a
                                   1096 ;	joysticksend.c: 397: delay(50);                            // delay 50ms waitting for calibaration.
      0004A1 4B 32            [ 1] 1097 	push	#0x32
      0004A3 4B 00            [ 1] 1098 	push	#0x00
      0004A5 CDr01r8E         [ 4] 1099 	call	_delay
      0004A8 5B 02            [ 2] 1100 	addw	sp, #2
      0004AA 5B 0D            [ 2] 1101 	addw	sp, #13
      0004AC 81               [ 4] 1102 	ret
                                   1103 ;	joysticksend.c: 401: void SE8R01_Analog_Init()           //SE8R01 初始化
                                   1104 ;	-----------------------------------------
                                   1105 ;	 function SE8R01_Analog_Init
                                   1106 ;	-----------------------------------------
      0004AD                       1107 _SE8R01_Analog_Init:
      0004AD 52 15            [ 2] 1108 	sub	sp, #21
                                   1109 ;	joysticksend.c: 406: gtemp[0]=0x28;
      0004AF AEr00r00         [ 2] 1110 	ldw	x, #_gtemp+0
      0004B2 1F 0E            [ 2] 1111 	ldw	(0x0e, sp), x
      0004B4 1E 0E            [ 2] 1112 	ldw	x, (0x0e, sp)
      0004B6 A6 28            [ 1] 1113 	ld	a, #0x28
      0004B8 F7               [ 1] 1114 	ld	(x), a
                                   1115 ;	joysticksend.c: 407: gtemp[1]=0x32;
      0004B9 1E 0E            [ 2] 1116 	ldw	x, (0x0e, sp)
      0004BB 5C               [ 2] 1117 	incw	x
      0004BC 1F 0C            [ 2] 1118 	ldw	(0x0c, sp), x
      0004BE 1E 0C            [ 2] 1119 	ldw	x, (0x0c, sp)
      0004C0 A6 32            [ 1] 1120 	ld	a, #0x32
      0004C2 F7               [ 1] 1121 	ld	(x), a
                                   1122 ;	joysticksend.c: 408: gtemp[2]=0x80;
      0004C3 1E 0E            [ 2] 1123 	ldw	x, (0x0e, sp)
      0004C5 5C               [ 2] 1124 	incw	x
      0004C6 5C               [ 2] 1125 	incw	x
      0004C7 1F 0A            [ 2] 1126 	ldw	(0x0a, sp), x
      0004C9 1E 0A            [ 2] 1127 	ldw	x, (0x0a, sp)
      0004CB A6 80            [ 1] 1128 	ld	a, #0x80
      0004CD F7               [ 1] 1129 	ld	(x), a
                                   1130 ;	joysticksend.c: 409: gtemp[3]=0x90;
      0004CE 1E 0E            [ 2] 1131 	ldw	x, (0x0e, sp)
      0004D0 1C 00 03         [ 2] 1132 	addw	x, #0x0003
      0004D3 1F 08            [ 2] 1133 	ldw	(0x08, sp), x
      0004D5 1E 08            [ 2] 1134 	ldw	x, (0x08, sp)
      0004D7 A6 90            [ 1] 1135 	ld	a, #0x90
      0004D9 F7               [ 1] 1136 	ld	(x), a
                                   1137 ;	joysticksend.c: 410: gtemp[4]=0x00;
      0004DA 1E 0E            [ 2] 1138 	ldw	x, (0x0e, sp)
      0004DC 1C 00 04         [ 2] 1139 	addw	x, #0x0004
      0004DF 7F               [ 1] 1140 	clr	(x)
                                   1141 ;	joysticksend.c: 411: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_SETUP_VALUE, gtemp, 5);
      0004E0 1E 0E            [ 2] 1142 	ldw	x, (0x0e, sp)
      0004E2 4B 05            [ 1] 1143 	push	#0x05
      0004E4 89               [ 2] 1144 	pushw	x
      0004E5 4B 3E            [ 1] 1145 	push	#0x3e
      0004E7 CDr00rA8         [ 4] 1146 	call	_write_spi_buf
      0004EA 5B 04            [ 2] 1147 	addw	sp, #4
                                   1148 ;	joysticksend.c: 412: delay(2);
      0004EC 4B 02            [ 1] 1149 	push	#0x02
      0004EE 4B 00            [ 1] 1150 	push	#0x00
      0004F0 CDr01r8E         [ 4] 1151 	call	_delay
      0004F3 5B 02            [ 2] 1152 	addw	sp, #2
                                   1153 ;	joysticksend.c: 415: rf_switch_bank(iBANK1);
      0004F5 4B 80            [ 1] 1154 	push	#0x80
      0004F7 CDr02rC4         [ 4] 1155 	call	_rf_switch_bank
      0004FA 84               [ 1] 1156 	pop	a
                                   1157 ;	joysticksend.c: 417: temp[0]=0x40;
      0004FB 96               [ 1] 1158 	ldw	x, sp
      0004FC 5C               [ 2] 1159 	incw	x
      0004FD 1F 06            [ 2] 1160 	ldw	(0x06, sp), x
      0004FF 1E 06            [ 2] 1161 	ldw	x, (0x06, sp)
      000501 A6 40            [ 1] 1162 	ld	a, #0x40
      000503 F7               [ 1] 1163 	ld	(x), a
                                   1164 ;	joysticksend.c: 418: temp[1]=0x01;               
      000504 1E 06            [ 2] 1165 	ldw	x, (0x06, sp)
      000506 5C               [ 2] 1166 	incw	x
      000507 1F 14            [ 2] 1167 	ldw	(0x14, sp), x
      000509 1E 14            [ 2] 1168 	ldw	x, (0x14, sp)
      00050B A6 01            [ 1] 1169 	ld	a, #0x01
      00050D F7               [ 1] 1170 	ld	(x), a
                                   1171 ;	joysticksend.c: 419: temp[2]=0x30;               
      00050E 1E 06            [ 2] 1172 	ldw	x, (0x06, sp)
      000510 5C               [ 2] 1173 	incw	x
      000511 5C               [ 2] 1174 	incw	x
      000512 1F 12            [ 2] 1175 	ldw	(0x12, sp), x
      000514 1E 12            [ 2] 1176 	ldw	x, (0x12, sp)
      000516 A6 30            [ 1] 1177 	ld	a, #0x30
      000518 F7               [ 1] 1178 	ld	(x), a
                                   1179 ;	joysticksend.c: 421: { temp[3]=0xE2; }              
      000519 1E 06            [ 2] 1180 	ldw	x, (0x06, sp)
      00051B 1C 00 03         [ 2] 1181 	addw	x, #0x0003
      00051E 1F 10            [ 2] 1182 	ldw	(0x10, sp), x
                                   1183 ;	joysticksend.c: 420: if (SE8R01_DR_2M==1)
      000520 CEu00u00         [ 2] 1184 	ldw	x, _SE8R01_DR_2M+0
      000523 A3 00 01         [ 2] 1185 	cpw	x, #0x0001
      000526 26 07            [ 1] 1186 	jrne	00102$
                                   1187 ;	joysticksend.c: 421: { temp[3]=0xE2; }              
      000528 1E 10            [ 2] 1188 	ldw	x, (0x10, sp)
      00052A A6 E2            [ 1] 1189 	ld	a, #0xe2
      00052C F7               [ 1] 1190 	ld	(x), a
      00052D 20 05            [ 2] 1191 	jra	00103$
      00052F                       1192 00102$:
                                   1193 ;	joysticksend.c: 423: { temp[3]=0xE0;}
      00052F 1E 10            [ 2] 1194 	ldw	x, (0x10, sp)
      000531 A6 E0            [ 1] 1195 	ld	a, #0xe0
      000533 F7               [ 1] 1196 	ld	(x), a
      000534                       1197 00103$:
                                   1198 ;	joysticksend.c: 425: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_PLL_CTL0, temp,4);
      000534 1E 06            [ 2] 1199 	ldw	x, (0x06, sp)
      000536 4B 04            [ 1] 1200 	push	#0x04
      000538 89               [ 2] 1201 	pushw	x
      000539 4B 21            [ 1] 1202 	push	#0x21
      00053B CDr00rA8         [ 4] 1203 	call	_write_spi_buf
      00053E 5B 04            [ 2] 1204 	addw	sp, #4
                                   1205 ;	joysticksend.c: 427: temp[0]=0x29;
      000540 1E 06            [ 2] 1206 	ldw	x, (0x06, sp)
      000542 A6 29            [ 1] 1207 	ld	a, #0x29
      000544 F7               [ 1] 1208 	ld	(x), a
                                   1209 ;	joysticksend.c: 428: temp[1]=0x89;
      000545 1E 14            [ 2] 1210 	ldw	x, (0x14, sp)
      000547 A6 89            [ 1] 1211 	ld	a, #0x89
      000549 F7               [ 1] 1212 	ld	(x), a
                                   1213 ;	joysticksend.c: 429: temp[2]=0x55;                     
      00054A 1E 12            [ 2] 1214 	ldw	x, (0x12, sp)
      00054C A6 55            [ 1] 1215 	ld	a, #0x55
      00054E F7               [ 1] 1216 	ld	(x), a
                                   1217 ;	joysticksend.c: 430: temp[3]=0x40;
      00054F 1E 10            [ 2] 1218 	ldw	x, (0x10, sp)
      000551 A6 40            [ 1] 1219 	ld	a, #0x40
      000553 F7               [ 1] 1220 	ld	(x), a
                                   1221 ;	joysticksend.c: 431: temp[4]=0x50;
      000554 1E 06            [ 2] 1222 	ldw	x, (0x06, sp)
      000556 A6 50            [ 1] 1223 	ld	a, #0x50
      000558 E7 04            [ 1] 1224 	ld	(0x0004, x), a
                                   1225 ;	joysticksend.c: 432: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_CAL_CTL, temp,5);
      00055A 1E 06            [ 2] 1226 	ldw	x, (0x06, sp)
      00055C 4B 05            [ 1] 1227 	push	#0x05
      00055E 89               [ 2] 1228 	pushw	x
      00055F 4B 23            [ 1] 1229 	push	#0x23
      000561 CDr00rA8         [ 4] 1230 	call	_write_spi_buf
      000564 5B 04            [ 2] 1231 	addw	sp, #4
                                   1232 ;	joysticksend.c: 434: if (SE8R01_DR_2M==1)
      000566 CEu00u00         [ 2] 1233 	ldw	x, _SE8R01_DR_2M+0
      000569 A3 00 01         [ 2] 1234 	cpw	x, #0x0001
      00056C 26 07            [ 1] 1235 	jrne	00105$
                                   1236 ;	joysticksend.c: 435: { temp[0]=0x29;}
      00056E 1E 06            [ 2] 1237 	ldw	x, (0x06, sp)
      000570 A6 29            [ 1] 1238 	ld	a, #0x29
      000572 F7               [ 1] 1239 	ld	(x), a
      000573 20 05            [ 2] 1240 	jra	00106$
      000575                       1241 00105$:
                                   1242 ;	joysticksend.c: 437: { temp[0]=0x14;}
      000575 1E 06            [ 2] 1243 	ldw	x, (0x06, sp)
      000577 A6 14            [ 1] 1244 	ld	a, #0x14
      000579 F7               [ 1] 1245 	ld	(x), a
      00057A                       1246 00106$:
                                   1247 ;	joysticksend.c: 439: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FDEV, temp,1);
      00057A 1E 06            [ 2] 1248 	ldw	x, (0x06, sp)
      00057C 4B 01            [ 1] 1249 	push	#0x01
      00057E 89               [ 2] 1250 	pushw	x
      00057F 4B 2C            [ 1] 1251 	push	#0x2c
      000581 CDr00rA8         [ 4] 1252 	call	_write_spi_buf
      000584 5B 04            [ 2] 1253 	addw	sp, #4
                                   1254 ;	joysticksend.c: 441: temp[0]=0x55;
      000586 1E 06            [ 2] 1255 	ldw	x, (0x06, sp)
      000588 A6 55            [ 1] 1256 	ld	a, #0x55
      00058A F7               [ 1] 1257 	ld	(x), a
                                   1258 ;	joysticksend.c: 442: temp[1]=0xC2;
      00058B 1E 14            [ 2] 1259 	ldw	x, (0x14, sp)
      00058D A6 C2            [ 1] 1260 	ld	a, #0xc2
      00058F F7               [ 1] 1261 	ld	(x), a
                                   1262 ;	joysticksend.c: 443: temp[2]=0x09;
      000590 1E 12            [ 2] 1263 	ldw	x, (0x12, sp)
      000592 A6 09            [ 1] 1264 	ld	a, #0x09
      000594 F7               [ 1] 1265 	ld	(x), a
                                   1266 ;	joysticksend.c: 444: temp[3]=0xAC;  
      000595 1E 10            [ 2] 1267 	ldw	x, (0x10, sp)
      000597 A6 AC            [ 1] 1268 	ld	a, #0xac
      000599 F7               [ 1] 1269 	ld	(x), a
                                   1270 ;	joysticksend.c: 445: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RX_CTRL,temp,4);
      00059A 1E 06            [ 2] 1271 	ldw	x, (0x06, sp)
      00059C 4B 04            [ 1] 1272 	push	#0x04
      00059E 89               [ 2] 1273 	pushw	x
      00059F 4B 31            [ 1] 1274 	push	#0x31
      0005A1 CDr00rA8         [ 4] 1275 	call	_write_spi_buf
      0005A4 5B 04            [ 2] 1276 	addw	sp, #4
                                   1277 ;	joysticksend.c: 447: temp[0]=0x00;
      0005A6 1E 06            [ 2] 1278 	ldw	x, (0x06, sp)
      0005A8 7F               [ 1] 1279 	clr	(x)
                                   1280 ;	joysticksend.c: 448: temp[1]=0x14;
      0005A9 1E 14            [ 2] 1281 	ldw	x, (0x14, sp)
      0005AB A6 14            [ 1] 1282 	ld	a, #0x14
      0005AD F7               [ 1] 1283 	ld	(x), a
                                   1284 ;	joysticksend.c: 449: temp[2]=0x08;   
      0005AE 1E 12            [ 2] 1285 	ldw	x, (0x12, sp)
      0005B0 A6 08            [ 1] 1286 	ld	a, #0x08
      0005B2 F7               [ 1] 1287 	ld	(x), a
                                   1288 ;	joysticksend.c: 450: temp[3]=0x29;
      0005B3 1E 10            [ 2] 1289 	ldw	x, (0x10, sp)
      0005B5 A6 29            [ 1] 1290 	ld	a, #0x29
      0005B7 F7               [ 1] 1291 	ld	(x), a
                                   1292 ;	joysticksend.c: 451: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_FAGC_CTRL_1, temp,4);
      0005B8 1E 06            [ 2] 1293 	ldw	x, (0x06, sp)
      0005BA 4B 04            [ 1] 1294 	push	#0x04
      0005BC 89               [ 2] 1295 	pushw	x
      0005BD 4B 33            [ 1] 1296 	push	#0x33
      0005BF CDr00rA8         [ 4] 1297 	call	_write_spi_buf
      0005C2 5B 04            [ 2] 1298 	addw	sp, #4
                                   1299 ;	joysticksend.c: 453: temp[0]=0x02;
      0005C4 1E 06            [ 2] 1300 	ldw	x, (0x06, sp)
      0005C6 A6 02            [ 1] 1301 	ld	a, #0x02
      0005C8 F7               [ 1] 1302 	ld	(x), a
                                   1303 ;	joysticksend.c: 454: temp[1]=0xC1;
      0005C9 1E 14            [ 2] 1304 	ldw	x, (0x14, sp)
      0005CB A6 C1            [ 1] 1305 	ld	a, #0xc1
      0005CD F7               [ 1] 1306 	ld	(x), a
                                   1307 ;	joysticksend.c: 455: temp[2]=0xCB;  
      0005CE 1E 12            [ 2] 1308 	ldw	x, (0x12, sp)
      0005D0 A6 CB            [ 1] 1309 	ld	a, #0xcb
      0005D2 F7               [ 1] 1310 	ld	(x), a
                                   1311 ;	joysticksend.c: 456: temp[3]=0x1C;
      0005D3 1E 10            [ 2] 1312 	ldw	x, (0x10, sp)
      0005D5 A6 1C            [ 1] 1313 	ld	a, #0x1c
      0005D7 F7               [ 1] 1314 	ld	(x), a
                                   1315 ;	joysticksend.c: 457: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_AGC_GAIN, temp,4);
      0005D8 1E 06            [ 2] 1316 	ldw	x, (0x06, sp)
      0005DA 4B 04            [ 1] 1317 	push	#0x04
      0005DC 89               [ 2] 1318 	pushw	x
      0005DD 4B 3D            [ 1] 1319 	push	#0x3d
      0005DF CDr00rA8         [ 4] 1320 	call	_write_spi_buf
      0005E2 5B 04            [ 2] 1321 	addw	sp, #4
                                   1322 ;	joysticksend.c: 459: temp[0]=0x97;
      0005E4 1E 06            [ 2] 1323 	ldw	x, (0x06, sp)
      0005E6 A6 97            [ 1] 1324 	ld	a, #0x97
      0005E8 F7               [ 1] 1325 	ld	(x), a
                                   1326 ;	joysticksend.c: 460: temp[1]=0x64;
      0005E9 1E 14            [ 2] 1327 	ldw	x, (0x14, sp)
      0005EB A6 64            [ 1] 1328 	ld	a, #0x64
      0005ED F7               [ 1] 1329 	ld	(x), a
                                   1330 ;	joysticksend.c: 461: temp[2]=0x00;
      0005EE 1E 12            [ 2] 1331 	ldw	x, (0x12, sp)
      0005F0 7F               [ 1] 1332 	clr	(x)
                                   1333 ;	joysticksend.c: 462: temp[3]=0x01;
      0005F1 1E 10            [ 2] 1334 	ldw	x, (0x10, sp)
      0005F3 A6 01            [ 1] 1335 	ld	a, #0x01
      0005F5 F7               [ 1] 1336 	ld	(x), a
                                   1337 ;	joysticksend.c: 463: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_RF_IVGEN, temp,4);
      0005F6 1E 06            [ 2] 1338 	ldw	x, (0x06, sp)
      0005F8 4B 04            [ 1] 1339 	push	#0x04
      0005FA 89               [ 2] 1340 	pushw	x
      0005FB 4B 3E            [ 1] 1341 	push	#0x3e
      0005FD CDr00rA8         [ 4] 1342 	call	_write_spi_buf
      000600 5B 04            [ 2] 1343 	addw	sp, #4
                                   1344 ;	joysticksend.c: 465: gtemp[0]=0x2A;
      000602 1E 0E            [ 2] 1345 	ldw	x, (0x0e, sp)
      000604 A6 2A            [ 1] 1346 	ld	a, #0x2a
      000606 F7               [ 1] 1347 	ld	(x), a
                                   1348 ;	joysticksend.c: 466: gtemp[1]=0x04;
      000607 1E 0C            [ 2] 1349 	ldw	x, (0x0c, sp)
      000609 A6 04            [ 1] 1350 	ld	a, #0x04
      00060B F7               [ 1] 1351 	ld	(x), a
                                   1352 ;	joysticksend.c: 467: gtemp[2]=0x00;
      00060C 1E 0A            [ 2] 1353 	ldw	x, (0x0a, sp)
      00060E 7F               [ 1] 1354 	clr	(x)
                                   1355 ;	joysticksend.c: 468: gtemp[3]=0x7D;
      00060F 1E 08            [ 2] 1356 	ldw	x, (0x08, sp)
      000611 A6 7D            [ 1] 1357 	ld	a, #0x7d
      000613 F7               [ 1] 1358 	ld	(x), a
                                   1359 ;	joysticksend.c: 469: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK1_TEST_PKDET, gtemp, 4);
      000614 1E 0E            [ 2] 1360 	ldw	x, (0x0e, sp)
      000616 4B 04            [ 1] 1361 	push	#0x04
      000618 89               [ 2] 1362 	pushw	x
      000619 4B 3F            [ 1] 1363 	push	#0x3f
      00061B CDr00rA8         [ 4] 1364 	call	_write_spi_buf
      00061E 5B 04            [ 2] 1365 	addw	sp, #4
                                   1366 ;	joysticksend.c: 471: rf_switch_bank(iBANK0);
      000620 4B 00            [ 1] 1367 	push	#0x00
      000622 CDr02rC4         [ 4] 1368 	call	_rf_switch_bank
      000625 84               [ 1] 1369 	pop	a
      000626 5B 15            [ 2] 1370 	addw	sp, #21
      000628 81               [ 4] 1371 	ret
                                   1372 ;	joysticksend.c: 474: void SE8R01_Init()  
                                   1373 ;	-----------------------------------------
                                   1374 ;	 function SE8R01_Init
                                   1375 ;	-----------------------------------------
      000629                       1376 _SE8R01_Init:
      000629 52 05            [ 2] 1377 	sub	sp, #5
                                   1378 ;	joysticksend.c: 477: SE8R01_Calibration();   
      00062B CDr02rE1         [ 4] 1379 	call	_SE8R01_Calibration
                                   1380 ;	joysticksend.c: 478: SE8R01_Analog_Init();   
      00062E CDr04rAD         [ 4] 1381 	call	_SE8R01_Analog_Init
                                   1382 ;	joysticksend.c: 482: if (SE8R01_DR_2M==1)
      000631 CEu00u00         [ 2] 1383 	ldw	x, _SE8R01_DR_2M+0
      000634 A3 00 01         [ 2] 1384 	cpw	x, #0x0001
      000637 26 07            [ 1] 1385 	jrne	00105$
                                   1386 ;	joysticksend.c: 483: {  temp[0]=0b01001111; }     //2MHz,+5dbm
      000639 96               [ 1] 1387 	ldw	x, sp
      00063A 5C               [ 2] 1388 	incw	x
      00063B A6 4F            [ 1] 1389 	ld	a, #0x4f
      00063D F7               [ 1] 1390 	ld	(x), a
      00063E 20 14            [ 2] 1391 	jra	00106$
      000640                       1392 00105$:
                                   1393 ;	joysticksend.c: 484: else if  (SE8R01_DR_1M==1)
      000640 CEu00u02         [ 2] 1394 	ldw	x, _SE8R01_DR_1M+0
      000643 A3 00 01         [ 2] 1395 	cpw	x, #0x0001
      000646 26 07            [ 1] 1396 	jrne	00102$
                                   1397 ;	joysticksend.c: 485: {  temp[0]=0b01000111;  }     //1MHz,+5dbm
      000648 96               [ 1] 1398 	ldw	x, sp
      000649 5C               [ 2] 1399 	incw	x
      00064A A6 47            [ 1] 1400 	ld	a, #0x47
      00064C F7               [ 1] 1401 	ld	(x), a
      00064D 20 05            [ 2] 1402 	jra	00106$
      00064F                       1403 00102$:
                                   1404 ;	joysticksend.c: 487: {temp[0]=0b01101111;  }     //500K,+5dbm
      00064F 96               [ 1] 1405 	ldw	x, sp
      000650 5C               [ 2] 1406 	incw	x
      000651 A6 6F            [ 1] 1407 	ld	a, #0x6f
      000653 F7               [ 1] 1408 	ld	(x), a
      000654                       1409 00106$:
                                   1410 ;	joysticksend.c: 489: write_spi_buf(iRF_CMD_WRITE_REG|iRF_BANK0_RF_SETUP,temp,1);
      000654 96               [ 1] 1411 	ldw	x, sp
      000655 5C               [ 2] 1412 	incw	x
      000656 4B 01            [ 1] 1413 	push	#0x01
      000658 89               [ 2] 1414 	pushw	x
      000659 4B 26            [ 1] 1415 	push	#0x26
      00065B CDr00rA8         [ 4] 1416 	call	_write_spi_buf
      00065E 5B 04            [ 2] 1417 	addw	sp, #4
                                   1418 ;	joysticksend.c: 491: write_spi_reg(WRITE_REG|iRF_BANK0_EN_AA, 0x01);          //enable auto acc on pip 1
      000660 4B 01            [ 1] 1419 	push	#0x01
      000662 4B 21            [ 1] 1420 	push	#0x21
      000664 CDr00r2E         [ 4] 1421 	call	_write_spi_reg
      000667 5B 02            [ 2] 1422 	addw	sp, #2
                                   1423 ;	joysticksend.c: 492: write_spi_reg(WRITE_REG|iRF_BANK0_EN_RXADDR, 0x01);      //enable pip 1
      000669 4B 01            [ 1] 1424 	push	#0x01
      00066B 4B 22            [ 1] 1425 	push	#0x22
      00066D CDr00r2E         [ 4] 1426 	call	_write_spi_reg
      000670 5B 02            [ 2] 1427 	addw	sp, #2
                                   1428 ;	joysticksend.c: 493: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_AW, 0x02);        //4 byte adress
      000672 4B 02            [ 1] 1429 	push	#0x02
      000674 4B 23            [ 1] 1430 	push	#0x23
      000676 CDr00r2E         [ 4] 1431 	call	_write_spi_reg
      000679 5B 02            [ 2] 1432 	addw	sp, #2
                                   1433 ;	joysticksend.c: 494: write_spi_reg(WRITE_REG|iRF_BANK0_SETUP_RETR, 0x08);        //lowest 4 bits 0-15 rt transmisston higest 4 bits 256-4096us Auto Retransmit Delay
      00067B 4B 08            [ 1] 1434 	push	#0x08
      00067D 4B 24            [ 1] 1435 	push	#0x24
      00067F CDr00r2E         [ 4] 1436 	call	_write_spi_reg
      000682 5B 02            [ 2] 1437 	addw	sp, #2
                                   1438 ;	joysticksend.c: 495: write_spi_reg(WRITE_REG|iRF_BANK0_RF_CH, 40);
      000684 4B 28            [ 1] 1439 	push	#0x28
      000686 4B 25            [ 1] 1440 	push	#0x25
      000688 CDr00r2E         [ 4] 1441 	call	_write_spi_reg
      00068B 5B 02            [ 2] 1442 	addw	sp, #2
                                   1443 ;	joysticksend.c: 496: write_spi_reg(WRITE_REG|iRF_BANK0_DYNPD, 0x01);          //pipe0 pipe1 enable dynamic payload length data
      00068D 4B 01            [ 1] 1444 	push	#0x01
      00068F 4B 3C            [ 1] 1445 	push	#0x3c
      000691 CDr00r2E         [ 4] 1446 	call	_write_spi_reg
      000694 5B 02            [ 2] 1447 	addw	sp, #2
                                   1448 ;	joysticksend.c: 497: write_spi_reg(WRITE_REG|iRF_BANK0_FEATURE, 0x07);        // enable dynamic paload lenght; enbale payload with ack enable w_tx_payload_noack
      000696 4B 07            [ 1] 1449 	push	#0x07
      000698 4B 3D            [ 1] 1450 	push	#0x3d
      00069A CDr00r2E         [ 4] 1451 	call	_write_spi_reg
      00069D 5B 02            [ 2] 1452 	addw	sp, #2
                                   1453 ;	joysticksend.c: 498: write_spi_reg(WRITE_REG + CONFIG, 0x3E);
      00069F 4B 3E            [ 1] 1454 	push	#0x3e
      0006A1 4B 20            [ 1] 1455 	push	#0x20
      0006A3 CDr00r2E         [ 4] 1456 	call	_write_spi_reg
      0006A6 5B 02            [ 2] 1457 	addw	sp, #2
                                   1458 ;	joysticksend.c: 499: write_spi_buf(WRITE_REG + TX_ADDR, TX_ADDRESS, ADR_WIDTH);  //from tx
      0006A8 AEr00r0E         [ 2] 1459 	ldw	x, #_TX_ADDRESS+0
      0006AB 90 93            [ 1] 1460 	ldw	y, x
      0006AD 89               [ 2] 1461 	pushw	x
      0006AE 4B 04            [ 1] 1462 	push	#0x04
      0006B0 90 89            [ 2] 1463 	pushw	y
      0006B2 4B 30            [ 1] 1464 	push	#0x30
      0006B4 CDr00rA8         [ 4] 1465 	call	_write_spi_buf
      0006B7 5B 04            [ 2] 1466 	addw	sp, #4
      0006B9 85               [ 2] 1467 	popw	x
                                   1468 ;	joysticksend.c: 501: write_spi_buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, ADR_WIDTH); // Use the same address on the RX device as the TX device write_spi_reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
      0006BA 4B 04            [ 1] 1469 	push	#0x04
      0006BC 89               [ 2] 1470 	pushw	x
      0006BD 4B 2A            [ 1] 1471 	push	#0x2a
      0006BF CDr00rA8         [ 4] 1472 	call	_write_spi_buf
      0006C2 5B 04            [ 2] 1473 	addw	sp, #4
                                   1474 ;	joysticksend.c: 504: PC_ODR |= (1 << CE);
      0006C4 AE 50 0A         [ 2] 1475 	ldw	x, #0x500a
      0006C7 F6               [ 1] 1476 	ld	a, (x)
      0006C8 AA 08            [ 1] 1477 	or	a, #0x08
      0006CA F7               [ 1] 1478 	ld	(x), a
      0006CB 5B 05            [ 2] 1479 	addw	sp, #5
      0006CD 81               [ 4] 1480 	ret
                                   1481 ;	joysticksend.c: 510: int main () {
                                   1482 ;	-----------------------------------------
                                   1483 ;	 function main
                                   1484 ;	-----------------------------------------
      0006CE                       1485 _main:
      0006CE 52 2E            [ 2] 1486 	sub	sp, #46
                                   1487 ;	joysticksend.c: 515: UCHAR rx_addr_p1[]  = { 0xd2, 0xf0, 0xf0, 0xf0, 0xf0 };
      0006D0 90 96            [ 1] 1488 	ldw	y, sp
      0006D2 72 A9 00 28      [ 2] 1489 	addw	y, #40
      0006D6 A6 D2            [ 1] 1490 	ld	a, #0xd2
      0006D8 90 F7            [ 1] 1491 	ld	(y), a
      0006DA 93               [ 1] 1492 	ldw	x, y
      0006DB 5C               [ 2] 1493 	incw	x
      0006DC A6 F0            [ 1] 1494 	ld	a, #0xf0
      0006DE F7               [ 1] 1495 	ld	(x), a
      0006DF 93               [ 1] 1496 	ldw	x, y
      0006E0 5C               [ 2] 1497 	incw	x
      0006E1 5C               [ 2] 1498 	incw	x
      0006E2 A6 F0            [ 1] 1499 	ld	a, #0xf0
      0006E4 F7               [ 1] 1500 	ld	(x), a
      0006E5 93               [ 1] 1501 	ldw	x, y
      0006E6 A6 F0            [ 1] 1502 	ld	a, #0xf0
      0006E8 E7 03            [ 1] 1503 	ld	(0x0003, x), a
      0006EA 93               [ 1] 1504 	ldw	x, y
      0006EB A6 F0            [ 1] 1505 	ld	a, #0xf0
      0006ED E7 04            [ 1] 1506 	ld	(0x0004, x), a
                                   1507 ;	joysticksend.c: 516: UCHAR tx_addr[]     = { 0xe1, 0xf0, 0xf0, 0xf0, 0xf0 };
      0006EF 90 96            [ 1] 1508 	ldw	y, sp
      0006F1 72 A9 00 23      [ 2] 1509 	addw	y, #35
      0006F5 A6 E1            [ 1] 1510 	ld	a, #0xe1
      0006F7 90 F7            [ 1] 1511 	ld	(y), a
      0006F9 93               [ 1] 1512 	ldw	x, y
      0006FA 5C               [ 2] 1513 	incw	x
      0006FB A6 F0            [ 1] 1514 	ld	a, #0xf0
      0006FD F7               [ 1] 1515 	ld	(x), a
      0006FE 93               [ 1] 1516 	ldw	x, y
      0006FF 5C               [ 2] 1517 	incw	x
      000700 5C               [ 2] 1518 	incw	x
      000701 A6 F0            [ 1] 1519 	ld	a, #0xf0
      000703 F7               [ 1] 1520 	ld	(x), a
      000704 93               [ 1] 1521 	ldw	x, y
      000705 A6 F0            [ 1] 1522 	ld	a, #0xf0
      000707 E7 03            [ 1] 1523 	ld	(0x0003, x), a
      000709 93               [ 1] 1524 	ldw	x, y
      00070A 1C 00 04         [ 2] 1525 	addw	x, #0x0004
      00070D A6 F0            [ 1] 1526 	ld	a, #0xf0
      00070F F7               [ 1] 1527 	ld	(x), a
                                   1528 ;	joysticksend.c: 519: InitializeSystemClock();
      000710 CDr01r44         [ 4] 1529 	call	_InitializeSystemClock
                                   1530 ;	joysticksend.c: 526: PD_DDR |= (1 << 2) ; // output mode
      000713 AE 50 11         [ 2] 1531 	ldw	x, #0x5011
      000716 F6               [ 1] 1532 	ld	a, (x)
      000717 AA 04            [ 1] 1533 	or	a, #0x04
      000719 F7               [ 1] 1534 	ld	(x), a
                                   1535 ;	joysticksend.c: 527: PD_CR1 |= (1 << 2) ; // push-pull
      00071A AE 50 12         [ 2] 1536 	ldw	x, #0x5012
      00071D F6               [ 1] 1537 	ld	a, (x)
      00071E AA 04            [ 1] 1538 	or	a, #0x04
      000720 F7               [ 1] 1539 	ld	(x), a
                                   1540 ;	joysticksend.c: 529: PD_ODR |= (1 << 2);
      000721 AE 50 0F         [ 2] 1541 	ldw	x, #0x500f
      000724 F6               [ 1] 1542 	ld	a, (x)
      000725 AA 04            [ 1] 1543 	or	a, #0x04
      000727 F7               [ 1] 1544 	ld	(x), a
                                   1545 ;	joysticksend.c: 534: PD_DDR &= ~(1<<4);
      000728 AE 50 11         [ 2] 1546 	ldw	x, #0x5011
      00072B F6               [ 1] 1547 	ld	a, (x)
      00072C A4 EF            [ 1] 1548 	and	a, #0xef
      00072E F7               [ 1] 1549 	ld	(x), a
                                   1550 ;	joysticksend.c: 535: PD_CR1 |= (1<<4);
      00072F AE 50 12         [ 2] 1551 	ldw	x, #0x5012
      000732 F6               [ 1] 1552 	ld	a, (x)
      000733 AA 10            [ 1] 1553 	or	a, #0x10
      000735 F7               [ 1] 1554 	ld	(x), a
                                   1555 ;	joysticksend.c: 536: InitializeUART(); //uart port is used for analog input
      000736 CDr02r3C         [ 4] 1556 	call	_InitializeUART
                                   1557 ;	joysticksend.c: 544: InitializeSPI ();
      000739 CDr01r1C         [ 4] 1558 	call	_InitializeSPI
                                   1559 ;	joysticksend.c: 547: memset (tx_payload, 0, sizeof(tx_payload));
      00073C 96               [ 1] 1560 	ldw	x, sp
      00073D 5C               [ 2] 1561 	incw	x
      00073E 5C               [ 2] 1562 	incw	x
      00073F 1F 2D            [ 2] 1563 	ldw	(0x2d, sp), x
      000741 16 2D            [ 2] 1564 	ldw	y, (0x2d, sp)
      000743 4B 21            [ 1] 1565 	push	#0x21
      000745 4B 00            [ 1] 1566 	push	#0x00
      000747 5F               [ 1] 1567 	clrw	x
      000748 89               [ 2] 1568 	pushw	x
      000749 90 89            [ 2] 1569 	pushw	y
      00074B CDr00r00         [ 4] 1570 	call	_memset
      00074E 5B 06            [ 2] 1571 	addw	sp, #6
                                   1572 ;	joysticksend.c: 550: init_io();                        // Initialize IO port
      000750 CDr02rB5         [ 4] 1573 	call	_init_io
                                   1574 ;	joysticksend.c: 551: write_spi_reg(FLUSH_TX,0); // transmit -- send data 
      000753 4B 00            [ 1] 1575 	push	#0x00
      000755 4B E1            [ 1] 1576 	push	#0xe1
      000757 CDr00r2E         [ 4] 1577 	call	_write_spi_reg
      00075A 5B 02            [ 2] 1578 	addw	sp, #2
                                   1579 ;	joysticksend.c: 552: readstatus = read_spi_reg(CONFIG);
      00075C 4B 00            [ 1] 1580 	push	#0x00
      00075E CDr00r6A         [ 4] 1581 	call	_read_spi_reg
      000761 84               [ 1] 1582 	pop	a
                                   1583 ;	joysticksend.c: 553: readstatus = read_spi_reg(STATUS);
      000762 4B 07            [ 1] 1584 	push	#0x07
      000764 CDr00r6A         [ 4] 1585 	call	_read_spi_reg
      000767 84               [ 1] 1586 	pop	a
                                   1587 ;	joysticksend.c: 555: SE8R01_Init();
      000768 CDr06r29         [ 4] 1588 	call	_SE8R01_Init
                                   1589 ;	joysticksend.c: 559: while (1) {
      00076B                       1590 00104$:
                                   1591 ;	joysticksend.c: 565: joyswitch = PD_IDR & (1<<4);
      00076B AE 50 10         [ 2] 1592 	ldw	x, #0x5010
      00076E F6               [ 1] 1593 	ld	a, (x)
      00076F A4 10            [ 1] 1594 	and	a, #0x10
      000771 6B 01            [ 1] 1595 	ld	(0x01, sp), a
                                   1596 ;	joysticksend.c: 567: if (joyswitch == 1) PD_ODR &= ~(1 << 2); //switch led on port PD2 on
      000773 7B 01            [ 1] 1597 	ld	a, (0x01, sp)
      000775 A1 01            [ 1] 1598 	cp	a, #0x01
      000777 26 07            [ 1] 1599 	jrne	00102$
      000779 AE 50 0F         [ 2] 1600 	ldw	x, #0x500f
      00077C F6               [ 1] 1601 	ld	a, (x)
      00077D A4 FB            [ 1] 1602 	and	a, #0xfb
      00077F F7               [ 1] 1603 	ld	(x), a
      000780                       1604 00102$:
                                   1605 ;	joysticksend.c: 596: tx_payload[0] = 0xac; //first two is unique ID for this emitter 
      000780 1E 2D            [ 2] 1606 	ldw	x, (0x2d, sp)
      000782 A6 AC            [ 1] 1607 	ld	a, #0xac
      000784 F7               [ 1] 1608 	ld	(x), a
                                   1609 ;	joysticksend.c: 597: tx_payload[1] = 0xcc;
      000785 1E 2D            [ 2] 1610 	ldw	x, (0x2d, sp)
      000787 5C               [ 2] 1611 	incw	x
      000788 A6 CC            [ 1] 1612 	ld	a, #0xcc
      00078A F7               [ 1] 1613 	ld	(x), a
                                   1614 ;	joysticksend.c: 598: tx_payload[2] = xaxis>>8;
      00078B 1E 2D            [ 2] 1615 	ldw	x, (0x2d, sp)
      00078D 5C               [ 2] 1616 	incw	x
      00078E 5C               [ 2] 1617 	incw	x
      00078F 7F               [ 1] 1618 	clr	(x)
                                   1619 ;	joysticksend.c: 599: tx_payload[3] = xaxis & 0x00ff; 
      000790 1E 2D            [ 2] 1620 	ldw	x, (0x2d, sp)
      000792 1C 00 03         [ 2] 1621 	addw	x, #0x0003
      000795 7F               [ 1] 1622 	clr	(x)
                                   1623 ;	joysticksend.c: 600: tx_payload[4] = yaxis>>8;
      000796 1E 2D            [ 2] 1624 	ldw	x, (0x2d, sp)
      000798 1C 00 04         [ 2] 1625 	addw	x, #0x0004
      00079B 7F               [ 1] 1626 	clr	(x)
                                   1627 ;	joysticksend.c: 601: tx_payload[5] = yaxis & 0x00ff; 
      00079C 1E 2D            [ 2] 1628 	ldw	x, (0x2d, sp)
      00079E 1C 00 05         [ 2] 1629 	addw	x, #0x0005
      0007A1 7F               [ 1] 1630 	clr	(x)
                                   1631 ;	joysticksend.c: 602: tx_payload[6] = joyswitch; 
      0007A2 1E 2D            [ 2] 1632 	ldw	x, (0x2d, sp)
      0007A4 7B 01            [ 1] 1633 	ld	a, (0x01, sp)
      0007A6 E7 06            [ 1] 1634 	ld	(0x0006, x), a
                                   1635 ;	joysticksend.c: 603: write_spi_buf(iRF_CMD_WR_TX_PLOAD, tx_payload, 7);
      0007A8 1E 2D            [ 2] 1636 	ldw	x, (0x2d, sp)
      0007AA 4B 07            [ 1] 1637 	push	#0x07
      0007AC 89               [ 2] 1638 	pushw	x
      0007AD 4B A0            [ 1] 1639 	push	#0xa0
      0007AF CDr00rA8         [ 4] 1640 	call	_write_spi_buf
      0007B2 5B 04            [ 2] 1641 	addw	sp, #4
                                   1642 ;	joysticksend.c: 604: write_spi_reg(WRITE_REG+STATUS, 0xff);
      0007B4 4B FF            [ 1] 1643 	push	#0xff
      0007B6 4B 27            [ 1] 1644 	push	#0x27
      0007B8 CDr00r2E         [ 4] 1645 	call	_write_spi_reg
      0007BB 5B 02            [ 2] 1646 	addw	sp, #2
                                   1647 ;	joysticksend.c: 605: readstatus = read_spi_reg(STATUS);
      0007BD 4B 07            [ 1] 1648 	push	#0x07
      0007BF CDr00r6A         [ 4] 1649 	call	_read_spi_reg
      0007C2 5B 01            [ 2] 1650 	addw	sp, #1
                                   1651 ;	joysticksend.c: 606: UARTPrintF("status = \n\r");
      0007C4 AEr07rF6         [ 2] 1652 	ldw	x, #___str_0+0
      0007C7 88               [ 1] 1653 	push	a
      0007C8 89               [ 2] 1654 	pushw	x
      0007C9 CDr01rD9         [ 4] 1655 	call	_UARTPrintF
      0007CC 5B 02            [ 2] 1656 	addw	sp, #2
      0007CE 84               [ 1] 1657 	pop	a
                                   1658 ;	joysticksend.c: 607: print_UCHAR_hex(readstatus);
      0007CF 88               [ 1] 1659 	push	a
      0007D0 CDr01rF0         [ 4] 1660 	call	_print_UCHAR_hex
      0007D3 84               [ 1] 1661 	pop	a
                                   1662 ;	joysticksend.c: 608: readstatus=read_spi_reg(OBSERVE_TX); 
      0007D4 4B 08            [ 1] 1663 	push	#0x08
      0007D6 CDr00r6A         [ 4] 1664 	call	_read_spi_reg
      0007D9 5B 01            [ 2] 1665 	addw	sp, #1
                                   1666 ;	joysticksend.c: 609: print_UCHAR_hex(readstatus);
      0007DB 88               [ 1] 1667 	push	a
      0007DC CDr01rF0         [ 4] 1668 	call	_print_UCHAR_hex
      0007DF 84               [ 1] 1669 	pop	a
                                   1670 ;	joysticksend.c: 611: delay(4);
      0007E0 4B 04            [ 1] 1671 	push	#0x04
      0007E2 4B 00            [ 1] 1672 	push	#0x00
      0007E4 CDr01r8E         [ 4] 1673 	call	_delay
      0007E7 5B 02            [ 2] 1674 	addw	sp, #2
                                   1675 ;	joysticksend.c: 612: PD_ODR &= ~(1 << 2); //switch led on pd2 off
      0007E9 AE 50 0F         [ 2] 1676 	ldw	x, #0x500f
      0007EC F6               [ 1] 1677 	ld	a, (x)
      0007ED A4 FB            [ 1] 1678 	and	a, #0xfb
      0007EF F7               [ 1] 1679 	ld	(x), a
      0007F0 CCr07r6B         [ 2] 1680 	jp	00104$
      0007F3 5B 2E            [ 2] 1681 	addw	sp, #46
      0007F5 81               [ 4] 1682 	ret
                                   1683 	.area CODE
      0007F6                       1684 ___str_0:
      0007F6 73 74 61 74 75 73 20  1685 	.ascii "status = "
             3D 20
      0007FF 0A                    1686 	.db 0x0A
      000800 0D                    1687 	.db 0x0D
      000801 00                    1688 	.db 0x00
                                   1689 	.area INITIALIZER
      000000                       1690 __xinit__SE8R01_DR_2M:
      000000 00 00                 1691 	.dw #0x0000
      000002                       1692 __xinit__SE8R01_DR_1M:
      000002 00 00                 1693 	.dw #0x0000
      000004                       1694 __xinit__SE8R01_DR_500K:
      000004 00 01                 1695 	.dw #0x0001
      000006                       1696 __xinit__pload_width_now:
      000006 00 00                 1697 	.dw #0x0000
      000008                       1698 __xinit__newdata:
      000008 00 00                 1699 	.dw #0x0000
      00000A                       1700 __xinit__signal_lv:
      00000A 00                    1701 	.db #0x00	;  0
      00000B                       1702 __xinit__pip:
      00000B 00 00                 1703 	.dw #0x0000
      00000D                       1704 __xinit__status:
      00000D 00                    1705 	.db #0x00	; 0
      00000E                       1706 __xinit__TX_ADDRESS:
      00000E B3                    1707 	.db #0xB3	; 179
      00000F 43                    1708 	.db #0x43	; 67	'C'
      000010 10                    1709 	.db #0x10	; 16
      000011 10                    1710 	.db #0x10	; 16
      000012                       1711 __xinit__ADDRESS2:
      000012 B1                    1712 	.db #0xB1	; 177
      000013                       1713 __xinit__ADDRESS3:
      000013 B2                    1714 	.db #0xB2	; 178
      000014                       1715 __xinit__ADDRESS4:
      000014 B3                    1716 	.db #0xB3	; 179
      000015                       1717 __xinit__ADDRESS5:
      000015 B4                    1718 	.db #0xB4	; 180
      000016                       1719 __xinit__ADDRESS1:
      000016 B0                    1720 	.db #0xB0	; 176
      000017 43                    1721 	.db #0x43	; 67	'C'
      000018 10                    1722 	.db #0x10	; 16
      000019 10                    1723 	.db #0x10	; 16
      00001A                       1724 __xinit__ADDRESS0:
      00001A 34                    1725 	.db #0x34	; 52	'4'
      00001B 43                    1726 	.db #0x43	; 67	'C'
      00001C 10                    1727 	.db #0x10	; 16
      00001D 10                    1728 	.db #0x10	; 16
      00001E                       1729 __xinit__rx_buf:
      00001E 00                    1730 	.db #0x00	; 0
      00001F 00                    1731 	.db 0x00
      000020 00                    1732 	.db 0x00
      000021 00                    1733 	.db 0x00
      000022 00                    1734 	.db 0x00
      000023 00                    1735 	.db 0x00
      000024 00                    1736 	.db 0x00
      000025 00                    1737 	.db 0x00
      000026 00                    1738 	.db 0x00
      000027 00                    1739 	.db 0x00
      000028 00                    1740 	.db 0x00
      000029 00                    1741 	.db 0x00
      00002A 00                    1742 	.db 0x00
      00002B 00                    1743 	.db 0x00
      00002C 00                    1744 	.db 0x00
      00002D 00                    1745 	.db 0x00
      00002E 00                    1746 	.db 0x00
      00002F 00                    1747 	.db 0x00
      000030 00                    1748 	.db 0x00
      000031 00                    1749 	.db 0x00
      000032 00                    1750 	.db 0x00
      000033 00                    1751 	.db 0x00
      000034 00                    1752 	.db 0x00
      000035 00                    1753 	.db 0x00
      000036 00                    1754 	.db 0x00
      000037 00                    1755 	.db 0x00
      000038 00                    1756 	.db 0x00
      000039 00                    1757 	.db 0x00
      00003A 00                    1758 	.db 0x00
      00003B 00                    1759 	.db 0x00
      00003C 00                    1760 	.db 0x00
      00003D 00                    1761 	.db 0x00
      00003E                       1762 __xinit__tx_buf:
      00003E 00                    1763 	.db #0x00	; 0
      00003F 00                    1764 	.db 0x00
      000040 00                    1765 	.db 0x00
      000041 00                    1766 	.db 0x00
      000042 00                    1767 	.db 0x00
      000043 00                    1768 	.db 0x00
      000044 00                    1769 	.db 0x00
      000045 00                    1770 	.db 0x00
      000046 00                    1771 	.db 0x00
      000047 00                    1772 	.db 0x00
      000048 00                    1773 	.db 0x00
      000049 00                    1774 	.db 0x00
      00004A 00                    1775 	.db 0x00
      00004B 00                    1776 	.db 0x00
      00004C 00                    1777 	.db 0x00
      00004D 00                    1778 	.db 0x00
      00004E 00                    1779 	.db 0x00
      00004F 00                    1780 	.db 0x00
      000050 00                    1781 	.db 0x00
      000051 00                    1782 	.db 0x00
      000052 00                    1783 	.db 0x00
      000053 00                    1784 	.db 0x00
      000054 00                    1785 	.db 0x00
      000055 00                    1786 	.db 0x00
      000056 00                    1787 	.db 0x00
      000057 00                    1788 	.db 0x00
      000058 00                    1789 	.db 0x00
      000059 00                    1790 	.db 0x00
      00005A 00                    1791 	.db 0x00
      00005B 00                    1792 	.db 0x00
      00005C 00                    1793 	.db 0x00
      00005D 00                    1794 	.db 0x00
                                   1795 	.area CABS (ABS)
